{"ast":null,"code":"var _jsxFileName = \"/Users/onkarsarang/Documents/reactWork/quikie/src/components/draggable.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\nimport 'jquery.gridstrap';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Dr(props) {\n  const grid = 8;\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 ${grid}px 0 0`,\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n\n  const getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    display: 'flex',\n    padding: grid,\n    overflow: 'auto'\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable-id\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          ...provided.droppableProps,\n          className: \"col-12\",\n          id: \"grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: \"droppable1\",\n              index: 0,\n              children: (provided, snapshot) => {\n                const style = {\n                  backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n                  fontSize: 18,\n                  ...provided.draggableProps.style\n                };\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  style: style,\n                  children: \"Drag me!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 25\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: \"droppable2\",\n              index: 0,\n              children: (provided, snapshot) => {\n                const style = {\n                  backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n                  fontSize: 18,\n                  ...provided.draggableProps.style\n                };\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  style: style,\n                  children: \"Drag me here!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 25\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_c = Dr;\nexport default Dr;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dr\");","map":{"version":3,"sources":["/Users/onkarsarang/Documents/reactWork/quikie/src/components/draggable.js"],"names":["React","ReactDOM","$","DragDropContext","Droppable","Draggable","Dr","props","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","display","overflow","provided","snapshot","innerRef","droppableProps","style","backgroundColor","fontSize","draggableProps","placeholder"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery'\nimport 'jquery.gridstrap'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nfunction Dr(props) {\n    const grid = 8;\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        // some basic styles to make the items look a bit nicer\n        userSelect: 'none',\n        padding: grid * 2,\n        margin: `0 ${grid}px 0 0`,\n      \n        // change background colour if dragging\n        background: isDragging ? 'lightgreen' : 'grey',\n      \n        // styles we need to apply on draggables\n        ...draggableStyle,\n      });\n      \n      const getListStyle = isDraggingOver => ({\n        background: isDraggingOver ? 'lightblue' : 'lightgrey',\n        display: 'flex',\n        padding: grid,\n        overflow: 'auto',\n      });\n    return (\n        <>\n        {/* <DragDropContext>\n            <Droppable droppableId=\"droppable-1\" type=\"PERSON\">\n                {(provided, snapshot) => (\n                    <div\n                    ref={provided.innerRef}\n                    style={{ backgroundColor: snapshot.isDraggingOver ? 'blue' : 'grey' }}\n                    {...provided.droppableProps}\n                    >\n                    <Draggable key=\"key1\" draggableId=\"draggable-1\" index={0}>\n                    {(provided, snapshot) => {\n                        <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <div id=\"grid\" class=\"row\">\n                        <div class=\"col-xs-4 col-sm-2 col-md-1\"><h1>Hello</h1></div>\n                        <div class=\"col-xs-4 col-sm-2 col-md-1\"><h1>world</h1></div>\n                        </div>\n                        </div>\n                    }}\n                    </Draggable>\n                    {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext> */}\n        <DragDropContext >\n        <Droppable droppableId=\"droppable-id\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n             className=\"col-12\" id=\"grid\">\n              <div className=\"row\">\n                <Draggable draggableId=\"droppable1\" index={0}>\n                  {(provided, snapshot) => {\n                    const style = {\n                        backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n                        fontSize: 18,\n                        ...provided.draggableProps.style,\n                      };\n                      return (\n                        <div ref={provided.innerRef} {...provided.draggableProps} style={style}>\n                          Drag me!\n                        </div>\n                      );\n                    }}\n                </Draggable>\n              \n                <Draggable draggableId=\"droppable2\" index={0}>\n                {(provided, snapshot) => {\n                    const style = {\n                        backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n                        fontSize: 18,\n                        ...provided.draggableProps.style,\n                      };\n                      return (\n                        <div ref={provided.innerRef} {...provided.draggableProps} style={style}>\n                          Drag me here!\n                        </div>\n                      );\n                    }}\n                </Draggable>\n                </div>\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n            \n        </>\n    )\n}\n\nexport default Dr\n"]},"metadata":{},"sourceType":"module"}