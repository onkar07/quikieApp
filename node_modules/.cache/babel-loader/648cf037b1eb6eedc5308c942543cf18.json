{"ast":null,"code":"/*\r\n *  jquery.gridstrap - v{{ include-version }}\r\n *  gridstrap.js\r\n *  Use https://www.npmjs.com/package/jquery.gridstrap for version information, semantically-released.\r\n *  https://rosspi.github.io/gridstrap.js/\r\n *\r\n *  Made by Ross P\r\n *  Under MIT License\r\n */\n(function () {\n  function r(e, n, t) {\n    function o(i, f) {\n      if (!n[i]) {\n        if (!e[i]) {\n          var c = \"function\" == typeof require && require;\n          if (!f && c) return c(i, !0);\n          if (u) return u(i, !0);\n          var a = new Error(\"Cannot find module '\" + i + \"'\");\n          throw a.code = \"MODULE_NOT_FOUND\", a;\n        }\n\n        var p = n[i] = {\n          exports: {}\n        };\n        e[i][0].call(p.exports, function (r) {\n          var n = e[i][1][r];\n          return o(n || r);\n        }, p, p.exports, r, e, n, t);\n      }\n\n      return n[i].exports;\n    }\n\n    for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n\n    return o;\n  }\n\n  return r;\n})()({\n  1: [function (require, module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports[\"default\"] = void 0;\n    var _default = {\n      DATA_GRIDSTRAP: 'gridstrap',\n      DATA_HIDDEN_CELL: 'gridstrap-hidden-cell',\n      DATA_VISIBLE_CELL: 'gridstrap-visible-cell',\n      DATA_MOUSEDOWN_POSITION_DIFF: 'gridstrap-mousedown-position-diff',\n      DATA_MOUSEDOWN_SIZE: 'gridstrap-mousedown-size',\n      DATA_CELL_POSITION_AND_SIZE: 'gridstrap-position-size',\n      EVENT_DRAGSTART: 'dragstart',\n      EVENT_MOUSEDOWN: 'mousedown',\n      EVENT_MOUSEOVER: 'mouseover',\n      EVENT_MOUSEMOVE: 'mousemove',\n      EVENT_MOUSEUP: 'mouseup',\n      EVENT_TOUCHSTART: 'touchstart',\n      EVENT_TOUCHMOVE: 'touchmove',\n      EVENT_TOUCHEND: 'touchend',\n      EVENT_RESIZE: 'resize',\n      EVENT_CELL_RESIZE: 'cellresize',\n      EVENT_CELL_DRAG: 'celldrag',\n      EVENT_CELL_REDRAW: 'cellredraw',\n      ERROR_MISSING_JQUERY: 'Requires jQuery v3.4.1',\n      ERROR_INVALID_ATTACH_ELEMENT: 'Cannot attach element that is not a child of gridstrap parent.',\n      ERROR_NONCONTIGUOUS_HTML_UNDEFINED: 'nonContiguousCellHtml option cannot be null.'\n    };\n    exports[\"default\"] = _default;\n  }, {}],\n  2: [function (require, module, exports) {\n    \"use strict\";\n\n    var _constants = _interopRequireDefault(require(\"./constants\"));\n\n    var _utils = require(\"./utils\");\n\n    var _handlers = require(\"./handlers\");\n\n    var _setup = require(\"./setup\");\n\n    var _internal = require(\"./internal\");\n\n    var _methods = require(\"./methods\");\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        \"default\": obj\n      };\n    }\n\n    (function ($, window, document) {\n      $.Gridstrap = function (el, options) {\n        if (typeof jQuery == 'undefined' || !jQuery.Event || !jQuery.Event.prototype.hasOwnProperty('changedTouches')) {\n          throw new Error(_constants[\"default\"].ERROR_MISSING_JQUERY);\n        } // To avoid scope issues, use 'context' instead of 'this'\n        // to reference this class from internal events and functions.\n\n\n        var context = this; // Access to jQuery and DOM versions of element\n\n        context.$el = $(el);\n        context.el = el;\n        context.constants = _constants[\"default\"];\n        context.options = $.extend({}, $.Gridstrap.defaultOptions, options); // Do nothing if it's already been done before.\n\n        var existingInitialisation = context.$el.data(_constants[\"default\"].DATA_GRIDSTRAP);\n\n        if (existingInitialisation) {\n          if (context.options.debug) {\n            console.log(\"Gridstrap already initialised for element: \".concat(context.el.nodeName));\n          }\n\n          return;\n        } // Add a reverse reference to the DOM object\n\n\n        context.$el.data(_constants[\"default\"].DATA_GRIDSTRAP, context);\n        var setup = new _setup.Setup($, window, document, context.$el, context);\n        var internal = new _internal.Internal(setup);\n        var eventHandlers = new _handlers.Handlers(setup, internal);\n        var methods = new _methods.Methods(setup, internal, eventHandlers); // copy methods from Methods to context.\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Object.getOwnPropertyNames(Object.getPrototypeOf(methods))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var name = _step.value;\n            var method = methods[name]; // skip constructor\n\n            if (!(method instanceof Function) || method === _methods.Methods) continue;\n            context[name] = method.bind(methods);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        internal.InitOriginalCells();\n        internal.InitEventHandlers(eventHandlers);\n\n        if (context.options.debug) {\n          console.log(\"Gridstrap initialised for element: \".concat(context.el.nodeName));\n        } // initialised :).\n\n      };\n\n      $.Gridstrap.defaultOptions = {\n        gridCellSelector: '>*',\n        // jQuery selector for grid's cells relative to parent element.\n        hiddenCellClass: 'gridstrap-cell-hidden',\n        // class applied to 'hidden' cells.\n        visibleCellClass: 'gridstrap-cell-visible',\n        // class applied to 'visible' cells.\n        nonContiguousPlaceholderCellClass: 'gridstack-noncontiguous',\n        // class applied to non-contiguous placeholder cells.\n        dragCellClass: 'gridstrap-cell-drag',\n        // class applied to dragging cell.\n        resizeCellClass: 'gridstrap-cell-resize',\n        // class applied to resizing cell.\n        mouseMoveSelector: 'body',\n        // jQuery selector to bind mousemouse and mouseup events.\n        visibleCellContainerParentSelector: null,\n        // jQuery selector to append 'visible' cell container to. Null will use the element the plugin is initialised on.\n        visibleCellContainerClass: 'gridstrap-container',\n        // class applied to the cell container element.\n        getHtmlOfSourceCell: function getHtmlOfSourceCell($cell) {\n          // function to return the html of a 'source' cell.\n          return $cell[0].outerHTML;\n        },\n        dragCellHandleSelector: '*',\n        // jQuery selector relative to and including cell for drag handling.\n        draggable: true,\n        // toggle mouse dragging.\n        rearrangeOnDrag: true,\n        // toggle the triggering of rearranging cells before mouseup.\n        resizeHandleSelector: null,\n        // jQuery selector relative to cell for resize handling. Null disables.\n        resizeOnDrag: true,\n        // toggle mouse resizing.\t\n        swapMode: false,\n        // toggle swap or insert mode when rearranging cells.\n        nonContiguousCellHtml: null,\n        // html to use for non-contiguous placeholder cells.\n        autoPadNonContiguousCells: true,\n        // toggle adding non-contiguous cells automatically on drag or as needed.\n        updateCoordinatesOnWindowResize: true,\n        // enable window resize event handler.\n        debug: false,\n        // toggle console output.\n        dragMouseoverThrottle: 150,\n        // throttle cell mouseover events for rearranging.\n        windowResizeDebounce: 50,\n        // debounce redraw on window resize.\n        mousemoveDebounce: 0 // debounce mousemove for dragging cells.\n\n      };\n\n      $.fn.gridstrap = function (options) {\n        return this.each(function () {\n          new $.Gridstrap(this, options);\n        });\n      };\n    })(jQuery, window, document);\n  }, {\n    \"./constants\": 1,\n    \"./handlers\": 3,\n    \"./internal\": 4,\n    \"./methods\": 5,\n    \"./setup\": 6,\n    \"./utils\": 7\n  }],\n  3: [function (require, module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.Handlers = void 0;\n\n    var _constants = _interopRequireDefault(require(\"./constants\"));\n\n    var _utils = require(\"./utils\");\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        \"default\": obj\n      };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n\n    var Handlers = /*#__PURE__*/function () {\n      function Handlers(setup, internal) {\n        _classCallCheck(this, Handlers);\n\n        this.setup = setup;\n        this.internal = internal;\n      }\n\n      _createClass(Handlers, [{\n        key: \"onDragstart\",\n        value: function onDragstart(mouseEvent, $cell, gridstrapContext) {\n          var context = this.setup.Context;\n\n          if (gridstrapContext === context) {\n            mouseEvent.preventDefault();\n          }\n        }\n      }, {\n        key: \"onTouchStart\",\n        value: function onTouchStart(touchEvent, $cell, gridstrapContext) {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n          touchEvent.preventDefault();\n\n          if (touchEvent.touches.length) {\n            this.onMousedown(_utils.Utils.ConvertTouchToMouseEvent(touchEvent), $cell, gridstrapContext);\n          }\n        }\n      }, {\n        key: \"onMousedown\",\n        value: function onMousedown(mouseEvent, $cell, gridstrapContext) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n\n          if (gridstrapContext !== context) {\n            return;\n          }\n\n          if ($cell.hasClass(options.nonContiguousPlaceholderCellClass)) {\n            return;\n          }\n\n          if (options.resizeHandleSelector && $(mouseEvent.target).closest(options.resizeHandleSelector).length) {\n            // is resizing, not dragging.\n            if (!$cell.hasClass(options.resizeCellClass)) {\n              $cell.addClass(options.resizeCellClass);\n              this.internal.SetMouseDownData(mouseEvent, $cell);\n            }\n\n            return;\n          }\n\n          if (options.draggable && !$cell.hasClass(options.dragCellClass)) {\n            this.internal.SetMouseDownData(mouseEvent, $cell);\n            $cell.addClass(options.dragCellClass);\n            this.internal.MoveDraggedCell(mouseEvent, $cell);\n          }\n        }\n      }, {\n        key: \"onMouseover\",\n        value: function onMouseover(mouseEvent, $cell, gridstrapContext) {\n          var _this = this;\n\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options; // clear initially.\n\n          this.internal.LastMouseOverCellTarget = null;\n\n          if (!gridstrapContext.options.draggable) {\n            return;\n          }\n\n          var $draggedCell = this.internal.$GetDraggingCell();\n\n          if ($draggedCell.length) {\n            // Is currently dragging. \n            if ($cell.length && !$draggedCell.closest($cell).length) {\n              // make sure you're not mouseover-ing the dragged cell itself.\n              // css' 'pointer-events', 'none' should do this job, but this double checks.\n              this.internal.LastMouseOverCellTarget = $cell;\n\n              _utils.Utils.Limit(function () {\n                if (gridstrapContext.options.rearrangeOnDrag) {\n                  _this.internal.MoveCell($draggedCell, $cell, gridstrapContext); // reset dragged object to mouse pos, not pos of hidden cells. \n                  // do not trigger overlapping now.\n\n\n                  _this.internal.MoveDraggedCell(mouseEvent, $draggedCell, true);\n                }\n              }, options.dragMouseoverThrottle);\n            }\n          }\n        }\n      }, {\n        key: \"onTouchmove\",\n        value: function onTouchmove(touchEvent) {\n          this.onMousemove(_utils.Utils.ConvertTouchToMouseEvent(touchEvent));\n        }\n      }, {\n        key: \"onMousemove\",\n        value: function onMousemove(mouseEvent) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var $resizedCell = $(this.setup.ResizeCellSelector);\n\n          if ($resizedCell.length) {\n            // is resizing \n            var originalMouseDownDiff = $resizedCell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n            var originalMouseDownSize = $resizedCell.data(_constants[\"default\"].DATA_MOUSEDOWN_SIZE); // will change as resizing.\n\n            var cellPositionAndSize = $resizedCell.data(_constants[\"default\"].DATA_CELL_POSITION_AND_SIZE);\n\n            var absoluteOffset = _utils.Utils.GetAbsoluteOffsetForElementFromMouseEvent($resizedCell, mouseEvent, originalMouseDownDiff);\n\n            var newW = originalMouseDownSize.width + absoluteOffset.left - cellPositionAndSize.left;\n            var newH = originalMouseDownSize.height + absoluteOffset.top - cellPositionAndSize.top;\n            $resizedCell.css('width', newW);\n            $resizedCell.css('height', newH);\n\n            if (options.resizeOnDrag) {\n              this.internal.ResizeCell($resizedCell, newW, newH);\n            }\n          } else {\n            var $draggedCell = this.internal.$GetDraggingCell();\n\n            if ($draggedCell.length) {\n              // should just be one.\n              this.internal.MoveDraggedCell(mouseEvent, $draggedCell);\n\n              if (options.nonContiguousCellHtml && options.rearrangeOnDrag && options.autoPadNonContiguousCells) {\n                this.internal.UpdateNonContiguousCellsForDrag($draggedCell, mouseEvent);\n              }\n            }\n          }\n        }\n      }, {\n        key: \"onTouchend\",\n        value: function onTouchend(touchEvent) {\n          // don't convert to mouseEVent becuase there are no touches.\n          this.onMouseup(touchEvent);\n        }\n      }, {\n        key: \"onMouseup\",\n        value: function onMouseup(mouseEvent) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var $element = this.setup.$Element;\n          var document = this.setup.Document;\n\n          if (!options.draggable) {\n            return;\n          }\n\n          var $resizedCell = $(this.setup.ResizeCellSelector);\n\n          if (options.resizeHandleSelector && $resizedCell.length) {\n            if (!options.resizeOnDrag) {\n              var originalMouseDownDifference = $resizedCell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n              var newW = originalMouseDownCellPosition.w + mouseEvent.pageX - originalMouseDownPagePosition.x;\n              var newH = originalMouseDownCellPosition.h + mouseEvent.pageY - originalMouseDownPagePosition.y;\n              this.internal.ResizeCell($resizedCell, newW, newH);\n            }\n\n            $resizedCell.removeClass(options.resizeCellClass);\n\n            _utils.Utils.ClearMouseDownData($resizedCell);\n\n            return;\n          }\n\n          var $draggedCell = this.internal.$GetDraggingCell();\n\n          if ($draggedCell.length > 0) {\n            if (options.nonContiguousCellHtml && !options.rearrangeOnDrag && options.autoPadNonContiguousCells) {\n              this.internal.UpdateNonContiguousCellsForDrag($draggedCell, mouseEvent); // mouse event may be over a new placeholder cell now.\n\n              var $overlappedCell = this.internal.$GetNonDraggedCellFromPoint($draggedCell, mouseEvent);\n\n              if ($overlappedCell.length) {\n                this.internal.LastMouseOverCellTarget = $overlappedCell;\n              } else {\n                this.internal.LastMouseOverCellTarget = null;\n              }\n            } // no more dragging.\n\n\n            $draggedCell.removeClass(options.dragCellClass);\n\n            _utils.Utils.ClearMouseDownData($resizedCell);\n\n            var cellOriginalPosition = $draggedCell.data(_constants[\"default\"].DATA_CELL_POSITION_AND_SIZE);\n            context.setCellAbsolutePositionAndSize($draggedCell, cellOriginalPosition);\n\n            if (this.internal.LastMouseOverCellTarget && !options.rearrangeOnDrag) {\n              // rearrange on mouseup\n              this.internal.MoveCell($draggedCell, this.internal.LastMouseOverCellTarget, context);\n            }\n          }\n        }\n      }]);\n\n      return Handlers;\n    }();\n\n    exports.Handlers = Handlers;\n  }, {\n    \"./constants\": 1,\n    \"./utils\": 7\n  }],\n  4: [function (require, module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.Internal = void 0;\n\n    var _constants = _interopRequireDefault(require(\"./constants\"));\n\n    var _utils = require(\"./utils\");\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        \"default\": obj\n      };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n\n    var Internal = /*#__PURE__*/function () {\n      function Internal(setup) {\n        _classCallCheck(this, Internal);\n\n        this.setup = setup;\n        this.document = document;\n        this.cellsArray = [];\n      }\n\n      _createClass(Internal, [{\n        key: \"InitOriginalCells\",\n        value: function InitOriginalCells() {\n          var self = this;\n          var $ = self.setup.jQuery;\n          self.cellsArray = [];\n          self.setup.$OriginalCells.each(function (e) {\n            self.InitCellsHiddenCopyAndSetAbsolutePosition($(this));\n          });\n        }\n      }, {\n        key: \"InitEventHandlers\",\n        value: function InitEventHandlers(eventHandlers) {\n          var window = this.setup.Window;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n\n          var appendNamespace = function appendNamespace(eventName) {\n            return \"\".concat(eventName, \".gridstrap\");\n          };\n\n          this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_DRAGSTART)), true, eventHandlers.onDragstart.bind(eventHandlers));\n          this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEDOWN)), true, eventHandlers.onMousedown.bind(eventHandlers));\n          this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_TOUCHSTART)), true, eventHandlers.onTouchStart.bind(eventHandlers)); // pass false as param because we need to do non-contiguous stuff in there.\n\n          this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEOVER)), false, eventHandlers.onMouseover.bind(eventHandlers)); // it is not appropriate to confine the events to the visible cell wrapper.\n\n          $(options.mouseMoveSelector).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEMOVE)), _utils.Utils.Debounce(eventHandlers.onMousemove.bind(eventHandlers), options.mousemoveDebounce)).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_TOUCHMOVE)), _utils.Utils.Debounce(eventHandlers.onTouchmove.bind(eventHandlers), options.mousemoveDebounce)).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEUP)), eventHandlers.onMouseup.bind(eventHandlers)).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_TOUCHEND)), eventHandlers.onTouchend.bind(eventHandlers));\n\n          if (options.updateCoordinatesOnWindowResize) {\n            $(window).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_RESIZE)), _utils.Utils.Debounce(context.updateVisibleCellCoordinates, options.windowResizeDebounce));\n          }\n        }\n      }, {\n        key: \"InitCellsHiddenCopyAndSetAbsolutePosition\",\n        value: function InitCellsHiddenCopyAndSetAbsolutePosition($cell) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          this.ModifyCellsArray(function (array) {\n            return array.push($cell);\n          }); // Create html clone to take place of original $cell.\n          // Treat it as the 'hidden' cell, and turn the original $cell\n          // into the visible/absolute cell.\n\n          if (options.debug && !$cell.is(':visible')) {\n            console.log(\"Grid cell is invisible. Gridstrap should not initialise an invisible grid. (\".concat(this.el.nodeName, \"): \").concat($cell[0].nodeName, \")\"));\n          }\n\n          var htmlOfOriginal = options.getHtmlOfSourceCell.call(context, $cell);\n\n          var positionNSize = _utils.Utils.GetPositionAndSizeOfCell($cell);\n\n          $cell.before(htmlOfOriginal);\n          var $hiddenClone = $cell.prev();\n          $hiddenClone.addClass(options.hiddenCellClass);\n          $cell.addClass(options.visibleCellClass); // make it ref hidden cloned cell, both ways.\n\n          $cell.data(_constants[\"default\"].DATA_HIDDEN_CELL, $hiddenClone);\n          $hiddenClone.data(_constants[\"default\"].DATA_VISIBLE_CELL, $cell); // put absolute $cell in container.\n\n          $(this.setup.VisibleCellContainerSelector).append($cell.detach());\n          context.setCellAbsolutePositionAndSize($cell, positionNSize);\n        }\n      }, {\n        key: \"HandleCellMouseEvent\",\n        value: function HandleCellMouseEvent(context, eventName, onlyCallWhenTargetsCell, callback) {\n          // only call event if occured on one of managed cells that has been initialised.\n          var draggableSelector = context.options.gridCellSelector + ' ' + context.options.dragCellHandleSelector;\n\n          if (context.options.dragCellHandleSelector === $.Gridstrap.defaultOptions.dragCellHandleSelector || eventName === _constants[\"default\"].EVENT_MOUSEOVER) {\n            // If the default settings apply for drag handle mouse events,\n            // or if mouseover, then we want the event to be lenient as to what triggers it.\n            // Prepend selector with grid cell itself as an OR/, selector.\n            // To become the cell itself OR any dragCellHandleSelector within the cell. \n            draggableSelector = context.options.gridCellSelector + ',' + draggableSelector;\n          }\n\n          $(context.options.visibleCellContainerParentSelector).on(eventName, draggableSelector, function (mouseEvent) {\n            // user clicked on perhaps child element of draggable element.\n            var $managedCell = context.$getCellOfElement(mouseEvent.target);\n\n            if (onlyCallWhenTargetsCell && !$managedCell.length) {\n              // do nothing if mouse is not interacting with a cell\n              // and we're not meant to do anything unless it is.\n              return;\n            } // $managedCell may be null, callback needs to take care of that.\n\n\n            callback(mouseEvent, $managedCell, context);\n          });\n        }\n      }, {\n        key: \"SetMouseDownData\",\n        value: function SetMouseDownData(mouseEvent, $cell) {\n          var context = this.setup.Context;\n          var options = this.setup.Options; // compare page with element' offset.\n\n          var cellOffset = $cell.offset();\n          var w = $cell.outerWidth();\n          var h = $cell.outerHeight();\n          $cell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF, {\n            x: mouseEvent.pageX - cellOffset.left,\n            y: mouseEvent.pageY - cellOffset.top\n          });\n          $cell.data(_constants[\"default\"].DATA_MOUSEDOWN_SIZE, {\n            width: w,\n            height: h\n          });\n        }\n      }, {\n        key: \"GetNonDraggedElementFromPoint\",\n        value: function GetNonDraggedElementFromPoint($draggedCell, mouseEvent) {\n          var document = this.setup.Document;\n          var $ = this.setup.jQuery; //remove mouse events from dragged cell, because we need to test for overlap of underneath things.\n\n          var oldPointerEvents = $draggedCell.css('pointer-events');\n          var oldTouchAction = $draggedCell.css('touch-action');\n          $draggedCell.css('pointer-events', 'none');\n          $draggedCell.css('touch-action', 'none');\n          var element = document.elementFromPoint(mouseEvent.clientX, mouseEvent.clientY); // restore pointer-events css.\n\n          $draggedCell.css('pointer-events', oldPointerEvents);\n          $draggedCell.css('touch-action', oldTouchAction);\n          return element;\n        }\n      }, {\n        key: \"MoveDraggedCell\",\n        value: function MoveDraggedCell(mouseEvent, $cell, dontLookForOverlappedCell\n        /*optional*/\n        ) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var document = this.setup.Document;\n          var $element = this.setup.$Element;\n          var mouseDownPositionDifference = $cell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n\n          var absoluteOffset = _utils.Utils.GetAbsoluteOffsetForElementFromMouseEvent($cell, mouseEvent, mouseDownPositionDifference);\n\n          var event = $.Event(_constants[\"default\"].EVENT_CELL_DRAG, {\n            left: absoluteOffset.left,\n            top: absoluteOffset.top,\n            target: $cell[0]\n          });\n          $element.trigger(event);\n\n          if (event.isDefaultPrevented()) {\n            return;\n          }\n\n          $cell.css('left', absoluteOffset.left);\n          $cell.css('top', absoluteOffset.top);\n\n          if (dontLookForOverlappedCell) {\n            return;\n          }\n\n          var triggerMouseOverEvent = function triggerMouseOverEvent($element) {\n            $element.trigger($.Event(_constants[\"default\"].EVENT_MOUSEOVER, {\n              pageX: mouseEvent.pageX,\n              pageY: mouseEvent.pageY,\n              target: $element[0]\n            }));\n          };\n\n          var overlappedElement = this.GetNonDraggedElementFromPoint($cell, mouseEvent);\n          var $overlappedCell = context.$getCellOfElement(overlappedElement);\n\n          if ($overlappedCell.length) {\n            // have to create event here like this other mouse coords are missing.\n            triggerMouseOverEvent($overlappedCell);\n          } else {\n            // have possibly dragged over non-managed cell.\n            // it might be from a linked 'additional' gridstrap.\n            if (this.AdditionalGridstrapDragTargetSelector) {\n              $(this.AdditionalGridstrapDragTargetSelector).each(function () {\n                var additionalContext = $(this).data(_constants[\"default\"].DATA_GRIDSTRAP);\n\n                if (additionalContext) {\n                  // $getCellOfElement is a 'public' method.\n                  var $additionalContextCell = additionalContext.$getCellOfElement(overlappedElement);\n\n                  if ($additionalContextCell.length) {\n                    // have to create event here like this other mouse coords are missing.\n                    triggerMouseOverEvent($additionalContextCell);\n                  }\n                }\n              });\n            }\n          }\n        }\n      }, {\n        key: \"GetCellAndInternalIndex\",\n        value: function GetCellAndInternalIndex(element) {\n          // element or jquery selector, child of cell or cell itself.\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n\n          if (!element) {\n            return null;\n          }\n\n          var $visibleCellElement = $(element);\n          var visibleCellAndIndex = null; // visibleCellAndIndex.$cell might be a child element/control perhaps of $visibleCell (found in the managed array).\n\n          for (var i = 0; i < this.CellsArray.length && !visibleCellAndIndex; i++) {\n            var $closestManagedCell = $visibleCellElement.closest(this.CellsArray[i]);\n\n            if ($closestManagedCell.length > 0) {\n              var $closestGridstrap = this.$GetClosestGridstrap($visibleCellElement);\n\n              if ($closestGridstrap.is(context.$el)) {\n                visibleCellAndIndex = {\n                  index: i,\n                  $cell: this.CellsArray[i]\n                };\n              }\n            }\n          }\n\n          return visibleCellAndIndex;\n        }\n      }, {\n        key: \"$GetClosestGridstrap\",\n        value: function $GetClosestGridstrap(element) {\n          // looks up the tree to find the closest instantiated gridstap instance. May not be this one in the case of nested grids.\n          var $ = this.setup.jQuery;\n\n          var dataExistsInSelector = function dataExistsInSelector(selector) {\n            return $(selector).filter(function () {\n              return !!$(this).data(_constants[\"default\"].DATA_GRIDSTRAP);\n            });\n          }; // a little strange that we can;t select parents() and include element itself in the order desired, so we have to do it like this.\n\n\n          var $currentElement = dataExistsInSelector(element);\n\n          if ($currentElement.length) {\n            return $currentElement.first();\n          }\n\n          return dataExistsInSelector($(element).parents()).first();\n        }\n      }, {\n        key: \"$GetDraggingCell\",\n        value: function $GetDraggingCell() {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var $draggedCell = $(this.setup.DragCellSelector);\n\n          if (!$draggedCell.length) {\n            return $(); //empty set\n          } // closest gridstrap must be this one - could be nested, we don't want to pick that up.\n\n\n          var $closestGridstrap = this.$GetClosestGridstrap($draggedCell);\n\n          if (!$closestGridstrap.is(context.$el)) {\n            return $(); //empty set\n          }\n\n          return $draggedCell;\n        }\n      }, {\n        key: \"MoveCell\",\n        value: function MoveCell($movingVisibleCell, $targetVisibleCell, gridstrapContext) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var $hiddenDragged = $movingVisibleCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n          var $hiddenTarget = $targetVisibleCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n\n          if ($hiddenDragged.is($hiddenTarget)) {\n            return;\n          }\n\n          if (gridstrapContext !== context) {\n            // moving between different gridstraps.\n            if (this.AdditionalGridstrapDragTargetSelector) {\n              // moving cells from this gridstrap to another (targetGridstrap).\n              // target must be within specified options at init.\n              var $targetGridstrap = $(this.AdditionalGridstrapDragTargetSelector).filter(function () {\n                return $(this).data(_constants[\"default\"].DATA_GRIDSTRAP) === gridstrapContext;\n              }).first();\n\n              if ($targetGridstrap.length) {\n                if (options.swapMode) {\n                  var preDetachPositionTarget = _utils.Utils.GetPositionAndSizeOfCell($targetVisibleCell);\n\n                  var preDetachPositionMoving = _utils.Utils.GetPositionAndSizeOfCell($movingVisibleCell);\n\n                  var $detachedTargetOriginalCell = gridstrapContext.detachCell($targetVisibleCell);\n                  var $detachedMovingOriginalCell = context.detachCell($movingVisibleCell);\n                  var wasDragging = $detachedMovingOriginalCell.hasClass(options.dragCellClass);\n\n                  if (wasDragging) {\n                    $detachedMovingOriginalCell.removeClass(options.dragCellClass);\n                  }\n\n                  _utils.Utils.SwapJQueryElements($detachedMovingOriginalCell, $detachedTargetOriginalCell); //re attach in opposing grids.\n\n\n                  var $reattachedMovingCell = gridstrapContext.attachCell($detachedMovingOriginalCell);\n                  var $reattachedTargetCell = context.attachCell($detachedTargetOriginalCell); // have to remove visibleCellClass that these two would now have\n                  // as that should have the css transition animation in it, \n                  // and we want to bypass that, set position, then apply it, set position again. \n\n                  _utils.Utils.ClearAbsoluteCSS($reattachedMovingCell);\n\n                  _utils.Utils.ClearAbsoluteCSS($reattachedTargetCell);\n\n                  gridstrapContext.setCellAbsolutePositionAndSize($reattachedMovingCell, preDetachPositionMoving);\n                  context.setCellAbsolutePositionAndSize($reattachedTargetCell, preDetachPositionTarget); // $reattachedMovingCell.addClass(options.visibleCellClass);\n                  // $reattachedTargetCell.addClass(options.visibleCellClass);\n\n                  gridstrapContext.setCellAbsolutePositionAndSize($reattachedMovingCell, preDetachPositionTarget);\n                  context.setCellAbsolutePositionAndSize($reattachedTargetCell, preDetachPositionMoving);\n\n                  if (wasDragging) {\n                    $reattachedMovingCell.addClass(options.dragCellClass);\n                  }\n                } else {\n                  // insert mode.\n                  var _preDetachPositionMoving = _utils.Utils.GetPositionAndSizeOfCell($movingVisibleCell);\n\n                  var _$detachedMovingOriginalCell = context.detachCell($movingVisibleCell);\n\n                  var _wasDragging = _$detachedMovingOriginalCell.hasClass(options.dragCellClass);\n\n                  if (_wasDragging) {\n                    _$detachedMovingOriginalCell.removeClass(options.dragCellClass);\n                  }\n\n                  _utils.Utils.DetachAndInsertInPlaceJQueryElement(_$detachedMovingOriginalCell, $hiddenTarget);\n\n                  var _$reattachedMovingCell = gridstrapContext.attachCell(_$detachedMovingOriginalCell); // have to remove visibleCellClass that these two would now have\n                  // as that should have the css transition animation in it, \n                  // and we want to bypass that, set position, then apply it, set position again. \n\n\n                  _$reattachedMovingCell.removeClass(options.visibleCellClass);\n\n                  gridstrapContext.setCellAbsolutePositionAndSize(_$reattachedMovingCell, _preDetachPositionMoving);\n\n                  _$reattachedMovingCell.addClass(options.visibleCellClass);\n\n                  if (_wasDragging) {\n                    _$reattachedMovingCell.addClass(options.dragCellClass);\n                  }\n                }\n\n                gridstrapContext.updateVisibleCellCoordinates();\n                context.updateVisibleCellCoordinates();\n              }\n            }\n          } else {\n            // regular internal movement \n            if (options.swapMode) {\n              _utils.Utils.SwapJQueryElements($hiddenDragged, $hiddenTarget);\n            } else {\n              _utils.Utils.DetachAndInsertInPlaceJQueryElement($hiddenDragged, $hiddenTarget);\n            }\n\n            context.updateVisibleCellCoordinates();\n          }\n        } //~moveCell\n\n      }, {\n        key: \"ResizeCell\",\n        value: function ResizeCell($cell, width, height) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var $element = this.setup.$Element;\n          var event = $.Event(_constants[\"default\"].EVENT_CELL_RESIZE, {\n            width: width,\n            height: height,\n            target: $cell[0]\n          });\n          $element.trigger(event);\n\n          if (event.isDefaultPrevented()) {\n            return;\n          }\n\n          var $hiddenCell = $cell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n          $hiddenCell.css('width', width);\n          $hiddenCell.css('height', height);\n          context.updateVisibleCellCoordinates();\n        }\n      }, {\n        key: \"$GetHiddenCellsInElementOrder\",\n        value: function $GetHiddenCellsInElementOrder() {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n          var $element = this.setup.$Element;\n          var self = this;\n          var $attachedHiddenCells = $element.find(this.setup.HiddenCellSelector).filter(function () {\n            var $linkedVisibleCell = $(this).data(_constants[\"default\"].DATA_VISIBLE_CELL);\n\n            if (!$linkedVisibleCell || !$linkedVisibleCell.length) {\n              return false;\n            }\n\n            for (var i = 0; i < self.CellsArray.length; i++) {\n              if (self.CellsArray[i].is($linkedVisibleCell)) {\n                return true;\n              }\n            }\n\n            return false;\n          });\n          return $attachedHiddenCells;\n        }\n      }, {\n        key: \"ModifyCellsArray\",\n        value: function ModifyCellsArray(callback) {\n          callback(this.cellsArray);\n        }\n      }, {\n        key: \"UpdateNonContiguousCellsForDrag\",\n        value: function UpdateNonContiguousCellsForDrag($draggedCell, mouseEvent) {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n\n          var furthestVisibleCellPositionAndSize = _utils.Utils.GetPositionAndSizeOfCell($draggedCell);\n\n          var compare = function compare(positionAndSize) {\n            return positionAndSize.left + positionAndSize.width + (positionAndSize.top + positionAndSize.height) * 100000;\n          };\n\n          var $hiddenCells = this.$GetHiddenCellsInElementOrder();\n          $hiddenCells.each(function (i, e) {\n            if (!$(e).data(_constants[\"default\"].DATA_VISIBLE_CELL).hasClass(options.nonContiguousPlaceholderCellClass)) {\n              var positionAndSize = _utils.Utils.GetPositionAndSizeOfCell($(e));\n\n              if (compare(positionAndSize) > compare(furthestVisibleCellPositionAndSize)) {\n                furthestVisibleCellPositionAndSize = positionAndSize;\n              }\n            }\n          });\n          var changed = this.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n            var lastHiddenCellPositionAndSize = _utils.Utils.GetPositionAndSizeOfCell($hiddenCells.last()); // A whole row of extra cells should exist.\n\n\n            if (appending) {\n              // need at least 2* cell height worht of space at bottom of grid.\n              return lastHiddenCellPositionAndSize.top - furthestVisibleCellPositionAndSize.top < furthestVisibleCellPositionAndSize.height * 2;\n            } else {\n              return lastHiddenCellPositionAndSize.top - furthestVisibleCellPositionAndSize.top > furthestVisibleCellPositionAndSize.height * 2;\n            }\n          });\n\n          if (changed) {\n            this.MoveDraggedCell(mouseEvent, $draggedCell);\n          }\n        }\n      }, {\n        key: \"AppendOrRemoveNonContiguousCellsWhile\",\n        value: function AppendOrRemoveNonContiguousCellsWhile(appendWhilePredicate) {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n          var context = this.setup.Context;\n          var changed = false;\n          var $hiddenCells = this.$GetHiddenCellsInElementOrder();\n\n          while (appendWhilePredicate($hiddenCells, true)) {\n            // if mouse beyond or getting near end of static hidden element, then make some placeholder ones.\n            // insert dummy cells if cursor is beyond where the cells finish.\n            var $insertedCell = context.insertCell(options.nonContiguousCellHtml, $hiddenCells.length);\n            $insertedCell.addClass(options.nonContiguousPlaceholderCellClass);\n            var $insertedHiddenCell = $insertedCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n            $hiddenCells = $hiddenCells.add($insertedHiddenCell);\n            changed = true;\n          } // remove cells at end when we have too much.          \n\n\n          var $lastHiddenCell = $hiddenCells.last();\n          var $bottomRowHiddenCells = null;\n\n          var $getBottomRowHiddenCells = function $getBottomRowHiddenCells() {\n            $bottomRowHiddenCells = $bottomRowHiddenCells || $hiddenCells.filter(function (i, e) {\n              return _utils.Utils.GetPositionAndSizeOfCell($(e)).top === _utils.Utils.GetPositionAndSizeOfCell($lastHiddenCell).top;\n            });\n            return $bottomRowHiddenCells;\n          }; // remove all non-contiguous bottom row cells.\n\n\n          while (appendWhilePredicate($hiddenCells, false) && $getBottomRowHiddenCells().filter(function (i, e) {\n            return $(e).data(_constants[\"default\"].DATA_VISIBLE_CELL).hasClass(options.nonContiguousPlaceholderCellClass);\n          }).length === $getBottomRowHiddenCells().length && $getBottomRowHiddenCells().length > 0) {\n            // while all bottom row cells are placeholders.\n            context.removeCell($lastHiddenCell.data(_constants[\"default\"].DATA_VISIBLE_CELL));\n            $hiddenCells = $hiddenCells.not($lastHiddenCell); // update new last hidden cell.\n\n            $lastHiddenCell = $hiddenCells.last();\n            $bottomRowHiddenCells = null; // force refilter. \n\n            changed = true;\n          }\n\n          return changed;\n        }\n      }, {\n        key: \"AdditionalGridstrapDragTargetSelector\",\n        get: function get() {\n          return this.additionalGridstrapDragTargetSelector;\n        },\n        set: function set(value) {\n          this.additionalGridstrapDragTargetSelector = value;\n        }\n      }, {\n        key: \"LastMouseOverCellTarget\",\n        get: function get() {\n          return this.lastMouseOverCellTarget;\n        },\n        set: function set(value) {\n          this.lastMouseOverCellTarget = value;\n        }\n      }, {\n        key: \"CellsArray\",\n        get: function get() {\n          return this.cellsArray;\n        }\n      }]);\n\n      return Internal;\n    }();\n\n    exports.Internal = Internal;\n  }, {\n    \"./constants\": 1,\n    \"./utils\": 7\n  }],\n  5: [function (require, module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.Methods = void 0;\n\n    var _constants = _interopRequireDefault(require(\"./constants\"));\n\n    var _utils = require(\"./utils\");\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        \"default\": obj\n      };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n\n    var Methods = /*#__PURE__*/function () {\n      function Methods(setup, internal, handlers) {\n        _classCallCheck(this, Methods);\n\n        this.setup = setup;\n        this.internal = internal;\n        this.handlers = handlers;\n      }\n\n      _createClass(Methods, [{\n        key: \"$getCellOfElement\",\n        value: function $getCellOfElement(element) {\n          // could be selector\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var found = this.internal.GetCellAndInternalIndex(element);\n\n          if (!found) {\n            return $();\n          }\n\n          return found.$cell;\n        }\n      }, {\n        key: \"setCellAbsolutePositionAndSize\",\n        value: function setCellAbsolutePositionAndSize($cell, positionAndSize) {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var $element = this.setup.$Element;\n          var event = $.Event(_constants[\"default\"].EVENT_CELL_REDRAW, {\n            left: positionAndSize.left,\n            top: positionAndSize.top,\n            width: positionAndSize.width,\n            height: positionAndSize.height,\n            target: $cell[0]\n          });\n          $element.trigger(event);\n\n          if (event.isDefaultPrevented()) {\n            return;\n          } // data here is relied upon when drag-stop. \n\n\n          $cell.data(_constants[\"default\"].DATA_CELL_POSITION_AND_SIZE, positionAndSize);\n          $cell.css('left', positionAndSize.left);\n          $cell.css('top', positionAndSize.top);\n          $cell.css('width', positionAndSize.width);\n          $cell.css('height', positionAndSize.height);\n        }\n      }, {\n        key: \"updateVisibleCellCoordinates\",\n        value: function updateVisibleCellCoordinates() {\n          var $ = this.setup.jQuery;\n          var context = this.setup.Context;\n          var options = this.setup.Options;\n          var $draggedCell = this.internal.$GetDraggingCell();\n\n          for (var i = 0; i < this.internal.CellsArray.length; i++) {\n            var $this = this.internal.CellsArray[i];\n            var $hiddenClone = $this.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n\n            var positionNSizeOfHiddenClone = _utils.Utils.GetPositionAndSizeOfCell($hiddenClone);\n\n            this.setCellAbsolutePositionAndSize($this, positionNSizeOfHiddenClone);\n          } // need to also update the first child gristrap - one that might exist within this one - it is then obviously recursive.\n\n\n          for (var i = 0; i < this.internal.CellsArray.length; i++) {\n            var $nestedGridstrap = this.internal.CellsArray[i].find('*').filter(function () {\n              return !!$(this).data(_constants[\"default\"].DATA_GRIDSTRAP);\n            });\n            $nestedGridstrap.each(function () {\n              $(this).data(_constants[\"default\"].DATA_GRIDSTRAP).updateVisibleCellCoordinates();\n            });\n          }\n        } // returns jquery object of new cell.\n        // index is optional.\n\n      }, {\n        key: \"insertCell\",\n        value: function insertCell(cellHtml, index) {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n          var $element = this.setup.$Element;\n          var $existingHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n\n          if (typeof index === 'undefined') {\n            index = $existingHiddenCells.length; // insert at end.\n          }\n\n          if (index > $existingHiddenCells.length && options.nonContiguousCellHtml && options.autoPadNonContiguousCells) {\n            this.internal.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n              if (!appending) {\n                // do not remove when trying to remove.\n                return false;\n              } // insert placeholders until quantity of cells is index -1.\n\n\n              return $hiddenCells.length < index;\n            }); // update these.\n\n            $existingHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n          }\n\n          var $insertedCell;\n\n          if (index === $existingHiddenCells.length) {\n            if ($existingHiddenCells.length === 0) {\n              // the grid is empty.\n              $insertedCell = $(cellHtml).appendTo($element);\n            } else {\n              $insertedCell = $(cellHtml).insertAfter($existingHiddenCells.last());\n            }\n          } else {\n            $insertedCell = $(cellHtml).insertBefore($existingHiddenCells.eq(index));\n          }\n\n          this.attachCell($insertedCell);\n          return $insertedCell;\n        }\n      }, {\n        key: \"attachCell\",\n        value: function attachCell(element) {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n          var $element = this.setup.$Element;\n\n          if (!$(element).closest($element).is($element)) {\n            throw new Error(_constants[\"default\"].ERROR_INVALID_ATTACH_ELEMENT);\n          }\n\n          this.internal.InitCellsHiddenCopyAndSetAbsolutePosition(element);\n          this.updateVisibleCellCoordinates();\n          return $(element);\n        }\n      }, {\n        key: \"detachCell\",\n        value: function detachCell(element) {\n          var options = this.setup.Options;\n          var cellNIndex = this.internal.GetCellAndInternalIndex(element);\n          var $hiddenClone = cellNIndex.$cell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n          var $detachedVisibleCell = cellNIndex.$cell.detach(); // remove 'visible' things, and put the cell back where it came from.\n\n          _utils.Utils.ClearAbsoluteCSS($detachedVisibleCell);\n\n          $detachedVisibleCell.removeData(_constants[\"default\"].DATA_HIDDEN_CELL);\n          $detachedVisibleCell.removeClass(options.visibleCellClass);\n          var $reattachedOriginalCell = $detachedVisibleCell.insertAfter($hiddenClone); // remove hidden clone.\n\n          $hiddenClone.remove(); // finally remove from managed array\n\n          this.internal.ModifyCellsArray(function (array) {\n            return array.splice(cellNIndex.index, 1);\n          });\n          this.updateVisibleCellCoordinates();\n          return $reattachedOriginalCell;\n        }\n      }, {\n        key: \"removeCell\",\n        value: function removeCell(element) {\n          var $detachedCell = this.detachCell(element);\n          $detachedCell.remove();\n          this.updateVisibleCellCoordinates();\n        }\n      }, {\n        key: \"moveCell\",\n        value: function moveCell(element, toIndex, targetGridstrap) {\n          // targetGridstrap optional..\n          var options = this.setup.Options;\n          var context = this.setup.Context;\n          var $existingVisibleCells = this.$getCells();\n\n          if (toIndex > $existingVisibleCells.length && options.nonContiguousCellHtml && options.autoPadNonContiguousCells) {\n            this.internal.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n              if (!appending) {\n                // do not remove when trying to remove.\n                return false;\n              } // insert placeholders until quantity of cells is index -1.\n\n\n              return $hiddenCells.length <= toIndex;\n            }); // update these.\n\n            $existingVisibleCells = this.$getCells();\n          }\n\n          var cellNIndex = this.internal.GetCellAndInternalIndex(element);\n          this.internal.MoveCell(cellNIndex.$cell, $existingVisibleCells.eq(toIndex), targetGridstrap || context);\n        }\n      }, {\n        key: \"$getCellFromCoordinates\",\n        value: function $getCellFromCoordinates(clientX, clientY) {\n          var document = this.setup.Document;\n          var $ = this.setup.jQuery;\n          var element = document.elementFromPoint(clientX, clientY);\n          var cellAndIndex = this.internal.GetCellAndInternalIndex(element);\n\n          if (!cellAndIndex) {\n            return $();\n          }\n\n          return cellAndIndex.$cell;\n        }\n      }, {\n        key: \"getCellIndexFromCoordinates\",\n        value: function getCellIndexFromCoordinates(clientX, clientY) {\n          var document = this.setup.Document;\n          var $ = this.setup.jQuery;\n          var element = document.elementFromPoint(clientX, clientY);\n          var cellAndIndex = this.internal.GetCellAndInternalIndex(element);\n\n          if (!cellAndIndex) {\n            return -1;\n          }\n\n          return this.$getCells().index(cellAndIndex.$cell);\n        }\n      }, {\n        key: \"$getCells\",\n        value: function $getCells() {\n          var $ = this.setup.jQuery;\n          var $attachedHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n          var attachedVisibleCellElements = $attachedHiddenCells.map(function () {\n            return $(this).data(_constants[\"default\"].DATA_VISIBLE_CELL)[0]; // TODO is this correct [0] ?\n          });\n          return $(attachedVisibleCellElements);\n        }\n      }, {\n        key: \"$getHiddenCells\",\n        value: function $getHiddenCells() {\n          return this.internal.$GetHiddenCellsInElementOrder();\n        }\n      }, {\n        key: \"$getCellContainer\",\n        value: function $getCellContainer() {\n          var $ = this.setup.jQuery;\n          return $(this.setup.VisibleCellContainerSelector);\n        }\n      }, {\n        key: \"updateOptions\",\n        value: function updateOptions(newOptions) {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n          this.setup.Options = $.extend({}, options, newOptions);\n        }\n      }, {\n        key: \"getCellIndexOfElement\",\n        value: function getCellIndexOfElement(element) {\n          var $cell = this.$getCellOfElement(element);\n          var $cells = this.$getCells();\n          return $cells.index($cell);\n        }\n      }, {\n        key: \"setAdditionalGridstrapDragTarget\",\n        value: function setAdditionalGridstrapDragTarget(element) {\n          var $ = this.setup.jQuery;\n          var eventHandlers = this.handlers;\n          var self = this;\n          var mouseOverAdditionalEventName = \"\".concat(_constants[\"default\"].EVENT_MOUSEOVER, \".gridstrap-additional-\").concat(this.setup.IdPrefix);\n\n          if (self.internal.AdditionalGridstrapDragTargetSelector) {\n            $(self.internal.AdditionalGridstrapDragTargetSelector).each(function () {\n              var $visibleCellContainer = $($(this).data(_constants[\"default\"].DATA_GRIDSTRAP).options.visibleCellContainerParentSelector); // remove any old handlers.\n              // have to prefix it to prevent clashes with other gridstraphs,\n\n              $visibleCellContainer.off(mouseOverAdditionalEventName);\n            });\n          }\n\n          self.internal.AdditionalGridstrapDragTargetSelector = element; // handle certain mouse event for potential other gridstraps.\n\n          if (self.internal.AdditionalGridstrapDragTargetSelector) {\n            $(self.internal.AdditionalGridstrapDragTargetSelector).each(function () {\n              self.internal.HandleCellMouseEvent($(this).data(_constants[\"default\"].DATA_GRIDSTRAP), mouseOverAdditionalEventName, false, eventHandlers.onMouseover.bind(eventHandlers));\n            });\n          }\n        }\n      }, {\n        key: \"modifyCell\",\n        value: function modifyCell(cellIndex, callback) {\n          var context = this.setup.Context;\n          var $visibleCell = this.$getCells().eq(cellIndex);\n          var $hiddenCell = $visibleCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n          var getVisibleCellCalled = false,\n              getHiddenCellCalled = false;\n          callback.call(context, function () {\n            getVisibleCellCalled = true;\n            return $visibleCell;\n          }, function () {\n            getHiddenCellCalled = true;\n            return $hiddenCell;\n          });\n\n          if (getVisibleCellCalled) {\n            // copy contents to hidden cell.\n            $hiddenCell.html($visibleCell.html());\n          }\n\n          this.updateVisibleCellCoordinates();\n        }\n      }, {\n        key: \"padWithNonContiguousCells\",\n        value: function padWithNonContiguousCells(callback) {\n          var $ = this.setup.jQuery;\n          var options = this.setup.Options;\n\n          if (!options.nonContiguousCellHtml) {\n            throw new Error(_constants[\"default\"].ERROR_NONCONTIGUOUS_HTML_UNDEFINED);\n          }\n\n          var $attachedHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n          this.internal.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n            if (!appending) {\n              // do not remove, when trying to remove.\n              // only append/pad.\n              return false;\n            }\n\n            var cellCount = $hiddenCells.length;\n            var placeHolderCount = $hiddenCells.filter(function (i, e) {\n              return $(e).data(_constants[\"default\"].DATA_VISIBLE_CELL).hasClass(options.nonContiguousPlaceholderCellClass);\n            }).length;\n            return callback(cellCount, placeHolderCount);\n          });\n        }\n      }]);\n\n      return Methods;\n    }();\n\n    exports.Methods = Methods;\n  }, {\n    \"./constants\": 1,\n    \"./utils\": 7\n  }],\n  6: [function (require, module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.Setup = void 0;\n\n    var _utils = require(\"./utils\");\n\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n\n    var Setup = /*#__PURE__*/function () {\n      function Setup($, window, document, $el, context) {\n        _classCallCheck(this, Setup);\n\n        var options = context.options; // must pick cells before potentially adding child wrapper to selection.\n\n        this.$originalCells = $el.find(options.gridCellSelector);\n        this.idPrefix = _utils.Utils.GenerateRandomId();\n        var wrapperGeneratedId = 'gridstrap-' + this.idPrefix;\n        this.visibleCellContainerSelector = '#' + wrapperGeneratedId; // drag selector must be within wrapper div. Turn class name/list into selector. \n\n        this.dragCellSelector = this.visibleCellContainerSelector + ' ' + _utils.Utils.ConvertCssClassToJQuerySelector(options.dragCellClass) + ':first';\n        this.resizeCellSelector = this.visibleCellContainerSelector + ' ' + _utils.Utils.ConvertCssClassToJQuerySelector(options.resizeCellClass) + ':first'; // visibleCellContainerClassSelector just contains a .class selector, dont prfix with id. Important. Refactor this.\n\n        this.visibleCellContainerClassSelector = _utils.Utils.ConvertCssClassToJQuerySelector(options.visibleCellContainerClass) + ':first';\n        this.hiddenCellSelector = _utils.Utils.ConvertCssClassToJQuerySelector(options.hiddenCellClass); // if option not specified, use JQuery element as parent for wrapper.\n\n        options.visibleCellContainerParentSelector = options.visibleCellContainerParentSelector || $el;\n        $(options.visibleCellContainerParentSelector).append('<div id=\"' + wrapperGeneratedId + '\" class=\"' + options.visibleCellContainerClass + '\"></div>');\n        this.window = window;\n        this.document = document;\n        this.$ = $;\n        this.$el = $el;\n        this.context = context;\n      }\n\n      _createClass(Setup, [{\n        key: \"Window\",\n        get: function get() {\n          return this.window;\n        }\n      }, {\n        key: \"Document\",\n        get: function get() {\n          return this.document;\n        }\n      }, {\n        key: \"jQuery\",\n        get: function get() {\n          return this.$;\n        }\n      }, {\n        key: \"Options\",\n        get: function get() {\n          return this.context.options;\n        },\n        set: function set(value) {\n          this.context.options = value;\n        }\n      }, {\n        key: \"$Element\",\n        get: function get() {\n          return this.$el;\n        } // Only used for assigning context when calling options' methods.\n\n      }, {\n        key: \"Context\",\n        get: function get() {\n          return this.context;\n        }\n      }, {\n        key: \"$OriginalCells\",\n        get: function get() {\n          return this.$originalCells;\n        }\n      }, {\n        key: \"IdPrefix\",\n        get: function get() {\n          return this.idPrefix;\n        }\n      }, {\n        key: \"VisibleCellContainerSelector\",\n        get: function get() {\n          return this.visibleCellContainerSelector;\n        }\n      }, {\n        key: \"DragCellSelector\",\n        get: function get() {\n          return this.dragCellSelector;\n        }\n      }, {\n        key: \"ResizeCellSelector\",\n        get: function get() {\n          return this.resizeCellSelector;\n        }\n      }, {\n        key: \"VisibleCellContainerClassSelector\",\n        get: function get() {\n          return this.visibleCellContainerClassSelector;\n        }\n      }, {\n        key: \"HiddenCellSelector\",\n        get: function get() {\n          return this.hiddenCellSelector;\n        }\n      }]);\n\n      return Setup;\n    }();\n\n    exports.Setup = Setup;\n  }, {\n    \"./utils\": 7\n  }],\n  7: [function (require, module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.Utils = void 0;\n\n    var _constants = _interopRequireDefault(require(\"./constants\"));\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        \"default\": obj\n      };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n\n    var Utils = /*#__PURE__*/function () {\n      function Utils() {\n        _classCallCheck(this, Utils);\n      }\n\n      _createClass(Utils, null, [{\n        key: \"GenerateRandomId\",\n        value: function GenerateRandomId() {\n          return Math.random().toString(36).substr(2, 5) + Math.round(Math.random() * 1000).toString();\n        }\n      }, {\n        key: \"ConvertCssClassToJQuerySelector\",\n        value: function ConvertCssClassToJQuerySelector(cssClass) {\n          return cssClass.replace(/(^ *| +)/g, '.');\n        }\n      }, {\n        key: \"Debounce\",\n        value: function Debounce(callback, milliseconds, leading, timeout) {\n          if (typeof timeout === 'undefined') {\n            timeout = null;\n          }\n\n          return function () {\n            var context = this;\n            var args = arguments;\n\n            var later = function later() {\n              timeout = null;\n\n              if (!leading) {\n                callback.apply(context, args);\n              }\n            };\n\n            var callNow = !milliseconds || leading && !timeout;\n            clearTimeout(timeout);\n\n            if (callNow) {\n              callback.apply(context, args);\n            } else {\n              timeout = setTimeout(later, milliseconds);\n            }\n\n            return timeout;\n          };\n        }\n      }, {\n        key: \"Limit\",\n        value: function Limit(callback, milliseconds) {\n          var d = new Date();\n          var n = d.getTime();\n\n          if (n - (Utils.limit || 0) > milliseconds) {\n            callback();\n            Utils.limit = n;\n          }\n        }\n      }, {\n        key: \"SwapJQueryElements\",\n        value: function SwapJQueryElements($a, $b) {\n          var getInPlaceFunction = function getInPlaceFunction($element) {\n            var $other = $a.is($element) ? $b : $a;\n            var $next = $element.next();\n            var $prev = $element.prev();\n            var $parent = $element.parent(); // cannot swap a with b exactly if there are no other siblings.\n\n            if ($next.length > 0 && !$next.is($other)) {\n              return function ($newElement) {\n                $next.before($newElement);\n              };\n            } else if ($prev.length > 0 && !$prev.is($other)) {\n              return function ($newElement) {\n                $prev.after($newElement);\n              };\n            } // if neither $next nor $prev is appropriate, \n            // and $next is $other, then can make assumption\n            // that we're moving $a to $b and $a is first element.\n            else if ($next.length > 0 && $next.is($other)) {\n                return function ($newElement) {\n                  $parent.prepend($newElement);\n                };\n              } else {\n                // no siblings, so can just use append\n                return function ($newElement) {\n                  $parent.append($newElement);\n                };\n              }\n          };\n\n          var aInPlaceFunc = getInPlaceFunction($a);\n          var bInPlaceFunc = getInPlaceFunction($b);\n          var $aDetached = $a.detach();\n          var $bDetached = $b.detach(); // swap finally.\n\n          bInPlaceFunc($aDetached);\n          aInPlaceFunc($bDetached);\n        }\n      }, {\n        key: \"DetachAndInsertInPlaceJQueryElement\",\n        value: function DetachAndInsertInPlaceJQueryElement($detachElement, $inPlaceElement) {\n          var inPlaceElementIndex = $inPlaceElement.index();\n          var detachElementIndex = $detachElement.index();\n          var $detachedElement = $detachElement.detach();\n\n          if (inPlaceElementIndex < detachElementIndex) {\n            $inPlaceElement.before($detachedElement);\n          } else {\n            $inPlaceElement.after($detachedElement);\n          }\n        }\n      }, {\n        key: \"ClearAbsoluteCSS\",\n        value: function ClearAbsoluteCSS($element) {\n          $element.css('top', '');\n          $element.css('left', '');\n          $element.css('width', '');\n          $element.css('height', '');\n        }\n      }, {\n        key: \"ClearMouseDownData\",\n        value: function ClearMouseDownData($cell) {\n          $cell.removeData(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n          $cell.removeData(_constants[\"default\"].DATA_MOUSEDOWN_SIZE);\n        }\n      }, {\n        key: \"GetAbsoluteOffsetForElementFromMouseEvent\",\n        value: function GetAbsoluteOffsetForElementFromMouseEvent($element, mouseEvent, adjustment) {\n          var $parent = $element.parent();\n          var parentOffset = $parent.offset();\n          var parentPosition = $parent.position();\n          var absoluteX = parentOffset.left - parentPosition.left;\n          var absoluteY = parentOffset.top - parentPosition.top;\n          var left = mouseEvent.pageX - absoluteX - adjustment.x;\n          var top = mouseEvent.pageY - absoluteY - adjustment.y;\n          return {\n            left: left,\n            top: top\n          };\n        }\n      }, {\n        key: \"GetPositionAndSizeOfCell\",\n        value: function GetPositionAndSizeOfCell($cell) {\n          var position = $cell.position();\n          var w = $cell.outerWidth();\n          var h = $cell.outerHeight();\n          return {\n            left: position.left,\n            top: position.top,\n            width: w,\n            height: h\n          };\n        }\n      }, {\n        key: \"ConvertTouchToMouseEvent\",\n        value: function ConvertTouchToMouseEvent(touchEvent) {\n          var touch = null;\n\n          for (var i = 0; !touch && i < touchEvent.changedTouches.length; i++) {\n            if (touchEvent.changedTouches[i].identifier === 0) {\n              touch = touchEvent.changedTouches[i];\n            }\n          }\n\n          touchEvent.pageX = touch.pageX;\n          touchEvent.pageY = touch.pageY;\n          touchEvent.clientX = touch.clientX;\n          touchEvent.clientY = touch.clientY;\n          return touchEvent;\n        }\n      }]);\n\n      return Utils;\n    }();\n\n    exports.Utils = Utils;\n  }, {\n    \"./constants\": 1\n  }]\n}, {}, [2]);","map":{"version":3,"sources":["/Users/onkarsarang/Documents/reactWork/quikie/node_modules/jquery.gridstrap/dist/jquery.gridstrap.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Object","defineProperty","value","_default","DATA_GRIDSTRAP","DATA_HIDDEN_CELL","DATA_VISIBLE_CELL","DATA_MOUSEDOWN_POSITION_DIFF","DATA_MOUSEDOWN_SIZE","DATA_CELL_POSITION_AND_SIZE","EVENT_DRAGSTART","EVENT_MOUSEDOWN","EVENT_MOUSEOVER","EVENT_MOUSEMOVE","EVENT_MOUSEUP","EVENT_TOUCHSTART","EVENT_TOUCHMOVE","EVENT_TOUCHEND","EVENT_RESIZE","EVENT_CELL_RESIZE","EVENT_CELL_DRAG","EVENT_CELL_REDRAW","ERROR_MISSING_JQUERY","ERROR_INVALID_ATTACH_ELEMENT","ERROR_NONCONTIGUOUS_HTML_UNDEFINED","_constants","_interopRequireDefault","_utils","_handlers","_setup","_internal","_methods","obj","__esModule","$","window","document","Gridstrap","el","options","jQuery","Event","prototype","hasOwnProperty","context","$el","constants","extend","defaultOptions","existingInitialisation","data","debug","console","log","concat","nodeName","setup","Setup","internal","Internal","eventHandlers","Handlers","methods","Methods","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","getOwnPropertyNames","getPrototypeOf","Symbol","iterator","_step","next","done","name","method","Function","bind","err","InitOriginalCells","InitEventHandlers","gridCellSelector","hiddenCellClass","visibleCellClass","nonContiguousPlaceholderCellClass","dragCellClass","resizeCellClass","mouseMoveSelector","visibleCellContainerParentSelector","visibleCellContainerClass","getHtmlOfSourceCell","$cell","outerHTML","dragCellHandleSelector","draggable","rearrangeOnDrag","resizeHandleSelector","resizeOnDrag","swapMode","nonContiguousCellHtml","autoPadNonContiguousCells","updateCoordinatesOnWindowResize","dragMouseoverThrottle","windowResizeDebounce","mousemoveDebounce","fn","gridstrap","each","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","onDragstart","mouseEvent","gridstrapContext","Context","preventDefault","onTouchStart","touchEvent","Options","touches","onMousedown","Utils","ConvertTouchToMouseEvent","hasClass","closest","addClass","SetMouseDownData","MoveDraggedCell","onMouseover","_this","LastMouseOverCellTarget","$draggedCell","$GetDraggingCell","Limit","MoveCell","onTouchmove","onMousemove","$resizedCell","ResizeCellSelector","originalMouseDownDiff","originalMouseDownSize","cellPositionAndSize","absoluteOffset","GetAbsoluteOffsetForElementFromMouseEvent","newW","width","left","newH","height","top","css","ResizeCell","UpdateNonContiguousCellsForDrag","onTouchend","onMouseup","$element","$Element","Document","originalMouseDownDifference","originalMouseDownCellPosition","w","pageX","originalMouseDownPagePosition","x","h","pageY","y","removeClass","ClearMouseDownData","$overlappedCell","$GetNonDraggedCellFromPoint","cellOriginalPosition","setCellAbsolutePositionAndSize","cellsArray","self","$OriginalCells","InitCellsHiddenCopyAndSetAbsolutePosition","Window","appendNamespace","eventName","HandleCellMouseEvent","on","Debounce","updateVisibleCellCoordinates","ModifyCellsArray","array","push","is","htmlOfOriginal","positionNSize","GetPositionAndSizeOfCell","before","$hiddenClone","prev","VisibleCellContainerSelector","append","detach","onlyCallWhenTargetsCell","callback","draggableSelector","$managedCell","$getCellOfElement","cellOffset","offset","outerWidth","outerHeight","GetNonDraggedElementFromPoint","oldPointerEvents","oldTouchAction","element","elementFromPoint","clientX","clientY","dontLookForOverlappedCell","mouseDownPositionDifference","event","trigger","isDefaultPrevented","triggerMouseOverEvent","overlappedElement","AdditionalGridstrapDragTargetSelector","additionalContext","$additionalContextCell","GetCellAndInternalIndex","$visibleCellElement","visibleCellAndIndex","CellsArray","$closestManagedCell","$closestGridstrap","$GetClosestGridstrap","index","dataExistsInSelector","selector","filter","$currentElement","first","parents","DragCellSelector","$movingVisibleCell","$targetVisibleCell","$hiddenDragged","$hiddenTarget","$targetGridstrap","preDetachPositionTarget","preDetachPositionMoving","$detachedTargetOriginalCell","detachCell","$detachedMovingOriginalCell","wasDragging","SwapJQueryElements","$reattachedMovingCell","attachCell","$reattachedTargetCell","ClearAbsoluteCSS","_preDetachPositionMoving","_$detachedMovingOriginalCell","_wasDragging","DetachAndInsertInPlaceJQueryElement","_$reattachedMovingCell","$hiddenCell","$GetHiddenCellsInElementOrder","$attachedHiddenCells","find","HiddenCellSelector","$linkedVisibleCell","furthestVisibleCellPositionAndSize","compare","positionAndSize","$hiddenCells","changed","AppendOrRemoveNonContiguousCellsWhile","appending","lastHiddenCellPositionAndSize","last","appendWhilePredicate","$insertedCell","insertCell","$insertedHiddenCell","add","$lastHiddenCell","$bottomRowHiddenCells","$getBottomRowHiddenCells","removeCell","not","get","additionalGridstrapDragTargetSelector","set","lastMouseOverCellTarget","handlers","found","$this","positionNSizeOfHiddenClone","$nestedGridstrap","cellHtml","$existingHiddenCells","appendTo","insertAfter","insertBefore","eq","cellNIndex","$detachedVisibleCell","removeData","$reattachedOriginalCell","remove","splice","$detachedCell","moveCell","toIndex","targetGridstrap","$existingVisibleCells","$getCells","$getCellFromCoordinates","cellAndIndex","getCellIndexFromCoordinates","attachedVisibleCellElements","map","$getHiddenCells","$getCellContainer","updateOptions","newOptions","getCellIndexOfElement","$cells","setAdditionalGridstrapDragTarget","mouseOverAdditionalEventName","IdPrefix","$visibleCellContainer","off","modifyCell","cellIndex","$visibleCell","getVisibleCellCalled","getHiddenCellCalled","html","padWithNonContiguousCells","cellCount","placeHolderCount","$originalCells","idPrefix","GenerateRandomId","wrapperGeneratedId","visibleCellContainerSelector","dragCellSelector","ConvertCssClassToJQuerySelector","resizeCellSelector","visibleCellContainerClassSelector","hiddenCellSelector","Math","random","toString","substr","round","cssClass","replace","milliseconds","leading","timeout","args","arguments","later","apply","callNow","clearTimeout","setTimeout","d","Date","getTime","limit","$a","$b","getInPlaceFunction","$other","$next","$prev","$parent","parent","$newElement","after","prepend","aInPlaceFunc","bInPlaceFunc","$aDetached","$bDetached","$detachElement","$inPlaceElement","inPlaceElementIndex","detachElementIndex","$detachedElement","adjustment","parentOffset","parentPosition","position","absoluteX","absoluteY","touch","changedTouches","identifier"],"mappings":"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","sourcesContent":["/*\r\n *  jquery.gridstrap - v{{ include-version }}\r\n *  gridstrap.js\r\n *  Use https://www.npmjs.com/package/jquery.gridstrap for version information, semantically-released.\r\n *  https://rosspi.github.io/gridstrap.js/\r\n *\r\n *  Made by Ross P\r\n *  Under MIT License\r\n */\r\n(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _default = {\n  DATA_GRIDSTRAP: 'gridstrap',\n  DATA_HIDDEN_CELL: 'gridstrap-hidden-cell',\n  DATA_VISIBLE_CELL: 'gridstrap-visible-cell',\n  DATA_MOUSEDOWN_POSITION_DIFF: 'gridstrap-mousedown-position-diff',\n  DATA_MOUSEDOWN_SIZE: 'gridstrap-mousedown-size',\n  DATA_CELL_POSITION_AND_SIZE: 'gridstrap-position-size',\n  EVENT_DRAGSTART: 'dragstart',\n  EVENT_MOUSEDOWN: 'mousedown',\n  EVENT_MOUSEOVER: 'mouseover',\n  EVENT_MOUSEMOVE: 'mousemove',\n  EVENT_MOUSEUP: 'mouseup',\n  EVENT_TOUCHSTART: 'touchstart',\n  EVENT_TOUCHMOVE: 'touchmove',\n  EVENT_TOUCHEND: 'touchend',\n  EVENT_RESIZE: 'resize',\n  EVENT_CELL_RESIZE: 'cellresize',\n  EVENT_CELL_DRAG: 'celldrag',\n  EVENT_CELL_REDRAW: 'cellredraw',\n  ERROR_MISSING_JQUERY: 'Requires jQuery v3.4.1',\n  ERROR_INVALID_ATTACH_ELEMENT: 'Cannot attach element that is not a child of gridstrap parent.',\n  ERROR_NONCONTIGUOUS_HTML_UNDEFINED: 'nonContiguousCellHtml option cannot be null.'\n};\nexports[\"default\"] = _default;\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _utils = require(\"./utils\");\n\nvar _handlers = require(\"./handlers\");\n\nvar _setup = require(\"./setup\");\n\nvar _internal = require(\"./internal\");\n\nvar _methods = require(\"./methods\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n(function ($, window, document) {\n  $.Gridstrap = function (el, options) {\n    if (typeof jQuery == 'undefined' || !jQuery.Event || !jQuery.Event.prototype.hasOwnProperty('changedTouches')) {\n      throw new Error(_constants[\"default\"].ERROR_MISSING_JQUERY);\n    } // To avoid scope issues, use 'context' instead of 'this'\n    // to reference this class from internal events and functions.\n\n\n    var context = this; // Access to jQuery and DOM versions of element\n\n    context.$el = $(el);\n    context.el = el;\n    context.constants = _constants[\"default\"];\n    context.options = $.extend({}, $.Gridstrap.defaultOptions, options); // Do nothing if it's already been done before.\n\n    var existingInitialisation = context.$el.data(_constants[\"default\"].DATA_GRIDSTRAP);\n\n    if (existingInitialisation) {\n      if (context.options.debug) {\n        console.log(\"Gridstrap already initialised for element: \".concat(context.el.nodeName));\n      }\n\n      return;\n    } // Add a reverse reference to the DOM object\n\n\n    context.$el.data(_constants[\"default\"].DATA_GRIDSTRAP, context);\n    var setup = new _setup.Setup($, window, document, context.$el, context);\n    var internal = new _internal.Internal(setup);\n    var eventHandlers = new _handlers.Handlers(setup, internal);\n    var methods = new _methods.Methods(setup, internal, eventHandlers); // copy methods from Methods to context.\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = Object.getOwnPropertyNames(Object.getPrototypeOf(methods))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var name = _step.value;\n        var method = methods[name]; // skip constructor\n\n        if (!(method instanceof Function) || method === _methods.Methods) continue;\n        context[name] = method.bind(methods);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    internal.InitOriginalCells();\n    internal.InitEventHandlers(eventHandlers);\n\n    if (context.options.debug) {\n      console.log(\"Gridstrap initialised for element: \".concat(context.el.nodeName));\n    } // initialised :).\n\n  };\n\n  $.Gridstrap.defaultOptions = {\n    gridCellSelector: '>*',\n    // jQuery selector for grid's cells relative to parent element.\n    hiddenCellClass: 'gridstrap-cell-hidden',\n    // class applied to 'hidden' cells.\n    visibleCellClass: 'gridstrap-cell-visible',\n    // class applied to 'visible' cells.\n    nonContiguousPlaceholderCellClass: 'gridstack-noncontiguous',\n    // class applied to non-contiguous placeholder cells.\n    dragCellClass: 'gridstrap-cell-drag',\n    // class applied to dragging cell.\n    resizeCellClass: 'gridstrap-cell-resize',\n    // class applied to resizing cell.\n    mouseMoveSelector: 'body',\n    // jQuery selector to bind mousemouse and mouseup events.\n    visibleCellContainerParentSelector: null,\n    // jQuery selector to append 'visible' cell container to. Null will use the element the plugin is initialised on.\n    visibleCellContainerClass: 'gridstrap-container',\n    // class applied to the cell container element.\n    getHtmlOfSourceCell: function getHtmlOfSourceCell($cell) {\n      // function to return the html of a 'source' cell.\n      return $cell[0].outerHTML;\n    },\n    dragCellHandleSelector: '*',\n    // jQuery selector relative to and including cell for drag handling.\n    draggable: true,\n    // toggle mouse dragging.\n    rearrangeOnDrag: true,\n    // toggle the triggering of rearranging cells before mouseup.\n    resizeHandleSelector: null,\n    // jQuery selector relative to cell for resize handling. Null disables.\n    resizeOnDrag: true,\n    // toggle mouse resizing.\t\n    swapMode: false,\n    // toggle swap or insert mode when rearranging cells.\n    nonContiguousCellHtml: null,\n    // html to use for non-contiguous placeholder cells.\n    autoPadNonContiguousCells: true,\n    // toggle adding non-contiguous cells automatically on drag or as needed.\n    updateCoordinatesOnWindowResize: true,\n    // enable window resize event handler.\n    debug: false,\n    // toggle console output.\n    dragMouseoverThrottle: 150,\n    // throttle cell mouseover events for rearranging.\n    windowResizeDebounce: 50,\n    // debounce redraw on window resize.\n    mousemoveDebounce: 0 // debounce mousemove for dragging cells.\n\n  };\n\n  $.fn.gridstrap = function (options) {\n    return this.each(function () {\n      new $.Gridstrap(this, options);\n    });\n  };\n})(jQuery, window, document);\n\n},{\"./constants\":1,\"./handlers\":3,\"./internal\":4,\"./methods\":5,\"./setup\":6,\"./utils\":7}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Handlers = void 0;\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Handlers =\n/*#__PURE__*/\nfunction () {\n  function Handlers(setup, internal) {\n    _classCallCheck(this, Handlers);\n\n    this.setup = setup;\n    this.internal = internal;\n  }\n\n  _createClass(Handlers, [{\n    key: \"onDragstart\",\n    value: function onDragstart(mouseEvent, $cell, gridstrapContext) {\n      var context = this.setup.Context;\n\n      if (gridstrapContext === context) {\n        mouseEvent.preventDefault();\n      }\n    }\n  }, {\n    key: \"onTouchStart\",\n    value: function onTouchStart(touchEvent, $cell, gridstrapContext) {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n      touchEvent.preventDefault();\n\n      if (touchEvent.touches.length) {\n        this.onMousedown(_utils.Utils.ConvertTouchToMouseEvent(touchEvent), $cell, gridstrapContext);\n      }\n    }\n  }, {\n    key: \"onMousedown\",\n    value: function onMousedown(mouseEvent, $cell, gridstrapContext) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n\n      if (gridstrapContext !== context) {\n        return;\n      }\n\n      if ($cell.hasClass(options.nonContiguousPlaceholderCellClass)) {\n        return;\n      }\n\n      if (options.resizeHandleSelector && $(mouseEvent.target).closest(options.resizeHandleSelector).length) {\n        // is resizing, not dragging.\n        if (!$cell.hasClass(options.resizeCellClass)) {\n          $cell.addClass(options.resizeCellClass);\n          this.internal.SetMouseDownData(mouseEvent, $cell);\n        }\n\n        return;\n      }\n\n      if (options.draggable && !$cell.hasClass(options.dragCellClass)) {\n        this.internal.SetMouseDownData(mouseEvent, $cell);\n        $cell.addClass(options.dragCellClass);\n        this.internal.MoveDraggedCell(mouseEvent, $cell);\n      }\n    }\n  }, {\n    key: \"onMouseover\",\n    value: function onMouseover(mouseEvent, $cell, gridstrapContext) {\n      var _this = this;\n\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options; // clear initially.\n\n      this.internal.LastMouseOverCellTarget = null;\n\n      if (!gridstrapContext.options.draggable) {\n        return;\n      }\n\n      var $draggedCell = this.internal.$GetDraggingCell();\n\n      if ($draggedCell.length) {\n        // Is currently dragging. \n        if ($cell.length && !$draggedCell.closest($cell).length) {\n          // make sure you're not mouseover-ing the dragged cell itself.\n          // css' 'pointer-events', 'none' should do this job, but this double checks.\n          this.internal.LastMouseOverCellTarget = $cell;\n\n          _utils.Utils.Limit(function () {\n            if (gridstrapContext.options.rearrangeOnDrag) {\n              _this.internal.MoveCell($draggedCell, $cell, gridstrapContext); // reset dragged object to mouse pos, not pos of hidden cells. \n              // do not trigger overlapping now.\n\n\n              _this.internal.MoveDraggedCell(mouseEvent, $draggedCell, true);\n            }\n          }, options.dragMouseoverThrottle);\n        }\n      }\n    }\n  }, {\n    key: \"onTouchmove\",\n    value: function onTouchmove(touchEvent) {\n      this.onMousemove(_utils.Utils.ConvertTouchToMouseEvent(touchEvent));\n    }\n  }, {\n    key: \"onMousemove\",\n    value: function onMousemove(mouseEvent) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var $resizedCell = $(this.setup.ResizeCellSelector);\n\n      if ($resizedCell.length) {\n        // is resizing \n        var originalMouseDownDiff = $resizedCell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n        var originalMouseDownSize = $resizedCell.data(_constants[\"default\"].DATA_MOUSEDOWN_SIZE); // will change as resizing.\n\n        var cellPositionAndSize = $resizedCell.data(_constants[\"default\"].DATA_CELL_POSITION_AND_SIZE);\n\n        var absoluteOffset = _utils.Utils.GetAbsoluteOffsetForElementFromMouseEvent($resizedCell, mouseEvent, originalMouseDownDiff);\n\n        var newW = originalMouseDownSize.width + absoluteOffset.left - cellPositionAndSize.left;\n        var newH = originalMouseDownSize.height + absoluteOffset.top - cellPositionAndSize.top;\n        $resizedCell.css('width', newW);\n        $resizedCell.css('height', newH);\n\n        if (options.resizeOnDrag) {\n          this.internal.ResizeCell($resizedCell, newW, newH);\n        }\n      } else {\n        var $draggedCell = this.internal.$GetDraggingCell();\n\n        if ($draggedCell.length) {\n          // should just be one.\n          this.internal.MoveDraggedCell(mouseEvent, $draggedCell);\n\n          if (options.nonContiguousCellHtml && options.rearrangeOnDrag && options.autoPadNonContiguousCells) {\n            this.internal.UpdateNonContiguousCellsForDrag($draggedCell, mouseEvent);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"onTouchend\",\n    value: function onTouchend(touchEvent) {\n      // don't convert to mouseEVent becuase there are no touches.\n      this.onMouseup(touchEvent);\n    }\n  }, {\n    key: \"onMouseup\",\n    value: function onMouseup(mouseEvent) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var $element = this.setup.$Element;\n      var document = this.setup.Document;\n\n      if (!options.draggable) {\n        return;\n      }\n\n      var $resizedCell = $(this.setup.ResizeCellSelector);\n\n      if (options.resizeHandleSelector && $resizedCell.length) {\n        if (!options.resizeOnDrag) {\n          var originalMouseDownDifference = $resizedCell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n          var newW = originalMouseDownCellPosition.w + mouseEvent.pageX - originalMouseDownPagePosition.x;\n          var newH = originalMouseDownCellPosition.h + mouseEvent.pageY - originalMouseDownPagePosition.y;\n          this.internal.ResizeCell($resizedCell, newW, newH);\n        }\n\n        $resizedCell.removeClass(options.resizeCellClass);\n\n        _utils.Utils.ClearMouseDownData($resizedCell);\n\n        return;\n      }\n\n      var $draggedCell = this.internal.$GetDraggingCell();\n\n      if ($draggedCell.length > 0) {\n        if (options.nonContiguousCellHtml && !options.rearrangeOnDrag && options.autoPadNonContiguousCells) {\n          this.internal.UpdateNonContiguousCellsForDrag($draggedCell, mouseEvent); // mouse event may be over a new placeholder cell now.\n\n          var $overlappedCell = this.internal.$GetNonDraggedCellFromPoint($draggedCell, mouseEvent);\n\n          if ($overlappedCell.length) {\n            this.internal.LastMouseOverCellTarget = $overlappedCell;\n          } else {\n            this.internal.LastMouseOverCellTarget = null;\n          }\n        } // no more dragging.\n\n\n        $draggedCell.removeClass(options.dragCellClass);\n\n        _utils.Utils.ClearMouseDownData($resizedCell);\n\n        var cellOriginalPosition = $draggedCell.data(_constants[\"default\"].DATA_CELL_POSITION_AND_SIZE);\n        context.setCellAbsolutePositionAndSize($draggedCell, cellOriginalPosition);\n\n        if (this.internal.LastMouseOverCellTarget && !options.rearrangeOnDrag) {\n          // rearrange on mouseup\n          this.internal.MoveCell($draggedCell, this.internal.LastMouseOverCellTarget, context);\n        }\n      }\n    }\n  }]);\n\n  return Handlers;\n}();\n\nexports.Handlers = Handlers;\n\n},{\"./constants\":1,\"./utils\":7}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Internal = void 0;\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Internal =\n/*#__PURE__*/\nfunction () {\n  function Internal(setup) {\n    _classCallCheck(this, Internal);\n\n    this.setup = setup;\n    this.document = document;\n    this.cellsArray = [];\n  }\n\n  _createClass(Internal, [{\n    key: \"InitOriginalCells\",\n    value: function InitOriginalCells() {\n      var self = this;\n      var $ = self.setup.jQuery;\n      self.cellsArray = [];\n      self.setup.$OriginalCells.each(function (e) {\n        self.InitCellsHiddenCopyAndSetAbsolutePosition($(this));\n      });\n    }\n  }, {\n    key: \"InitEventHandlers\",\n    value: function InitEventHandlers(eventHandlers) {\n      var window = this.setup.Window;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n\n      var appendNamespace = function appendNamespace(eventName) {\n        return \"\".concat(eventName, \".gridstrap\");\n      };\n\n      this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_DRAGSTART)), true, eventHandlers.onDragstart.bind(eventHandlers));\n      this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEDOWN)), true, eventHandlers.onMousedown.bind(eventHandlers));\n      this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_TOUCHSTART)), true, eventHandlers.onTouchStart.bind(eventHandlers)); // pass false as param because we need to do non-contiguous stuff in there.\n\n      this.HandleCellMouseEvent(context, \"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEOVER)), false, eventHandlers.onMouseover.bind(eventHandlers)); // it is not appropriate to confine the events to the visible cell wrapper.\n\n      $(options.mouseMoveSelector).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEMOVE)), _utils.Utils.Debounce(eventHandlers.onMousemove.bind(eventHandlers), options.mousemoveDebounce)).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_TOUCHMOVE)), _utils.Utils.Debounce(eventHandlers.onTouchmove.bind(eventHandlers), options.mousemoveDebounce)).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_MOUSEUP)), eventHandlers.onMouseup.bind(eventHandlers)).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_TOUCHEND)), eventHandlers.onTouchend.bind(eventHandlers));\n\n      if (options.updateCoordinatesOnWindowResize) {\n        $(window).on(\"\".concat(appendNamespace(_constants[\"default\"].EVENT_RESIZE)), _utils.Utils.Debounce(context.updateVisibleCellCoordinates, options.windowResizeDebounce));\n      }\n    }\n  }, {\n    key: \"InitCellsHiddenCopyAndSetAbsolutePosition\",\n    value: function InitCellsHiddenCopyAndSetAbsolutePosition($cell) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      this.ModifyCellsArray(function (array) {\n        return array.push($cell);\n      }); // Create html clone to take place of original $cell.\n      // Treat it as the 'hidden' cell, and turn the original $cell\n      // into the visible/absolute cell.\n\n      if (options.debug && !$cell.is(':visible')) {\n        console.log(\"Grid cell is invisible. Gridstrap should not initialise an invisible grid. (\".concat(this.el.nodeName, \"): \").concat($cell[0].nodeName, \")\"));\n      }\n\n      var htmlOfOriginal = options.getHtmlOfSourceCell.call(context, $cell);\n\n      var positionNSize = _utils.Utils.GetPositionAndSizeOfCell($cell);\n\n      $cell.before(htmlOfOriginal);\n      var $hiddenClone = $cell.prev();\n      $hiddenClone.addClass(options.hiddenCellClass);\n      $cell.addClass(options.visibleCellClass); // make it ref hidden cloned cell, both ways.\n\n      $cell.data(_constants[\"default\"].DATA_HIDDEN_CELL, $hiddenClone);\n      $hiddenClone.data(_constants[\"default\"].DATA_VISIBLE_CELL, $cell); // put absolute $cell in container.\n\n      $(this.setup.VisibleCellContainerSelector).append($cell.detach());\n      context.setCellAbsolutePositionAndSize($cell, positionNSize);\n    }\n  }, {\n    key: \"HandleCellMouseEvent\",\n    value: function HandleCellMouseEvent(context, eventName, onlyCallWhenTargetsCell, callback) {\n      // only call event if occured on one of managed cells that has been initialised.\n      var draggableSelector = context.options.gridCellSelector + ' ' + context.options.dragCellHandleSelector;\n\n      if (context.options.dragCellHandleSelector === $.Gridstrap.defaultOptions.dragCellHandleSelector || eventName === _constants[\"default\"].EVENT_MOUSEOVER) {\n        // If the default settings apply for drag handle mouse events,\n        // or if mouseover, then we want the event to be lenient as to what triggers it.\n        // Prepend selector with grid cell itself as an OR/, selector.\n        // To become the cell itself OR any dragCellHandleSelector within the cell. \n        draggableSelector = context.options.gridCellSelector + ',' + draggableSelector;\n      }\n\n      $(context.options.visibleCellContainerParentSelector).on(eventName, draggableSelector, function (mouseEvent) {\n        // user clicked on perhaps child element of draggable element.\n        var $managedCell = context.$getCellOfElement(mouseEvent.target);\n\n        if (onlyCallWhenTargetsCell && !$managedCell.length) {\n          // do nothing if mouse is not interacting with a cell\n          // and we're not meant to do anything unless it is.\n          return;\n        } // $managedCell may be null, callback needs to take care of that.\n\n\n        callback(mouseEvent, $managedCell, context);\n      });\n    }\n  }, {\n    key: \"SetMouseDownData\",\n    value: function SetMouseDownData(mouseEvent, $cell) {\n      var context = this.setup.Context;\n      var options = this.setup.Options; // compare page with element' offset.\n\n      var cellOffset = $cell.offset();\n      var w = $cell.outerWidth();\n      var h = $cell.outerHeight();\n      $cell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF, {\n        x: mouseEvent.pageX - cellOffset.left,\n        y: mouseEvent.pageY - cellOffset.top\n      });\n      $cell.data(_constants[\"default\"].DATA_MOUSEDOWN_SIZE, {\n        width: w,\n        height: h\n      });\n    }\n  }, {\n    key: \"GetNonDraggedElementFromPoint\",\n    value: function GetNonDraggedElementFromPoint($draggedCell, mouseEvent) {\n      var document = this.setup.Document;\n      var $ = this.setup.jQuery; //remove mouse events from dragged cell, because we need to test for overlap of underneath things.\n\n      var oldPointerEvents = $draggedCell.css('pointer-events');\n      var oldTouchAction = $draggedCell.css('touch-action');\n      $draggedCell.css('pointer-events', 'none');\n      $draggedCell.css('touch-action', 'none');\n      var element = document.elementFromPoint(mouseEvent.clientX, mouseEvent.clientY); // restore pointer-events css.\n\n      $draggedCell.css('pointer-events', oldPointerEvents);\n      $draggedCell.css('touch-action', oldTouchAction);\n      return element;\n    }\n  }, {\n    key: \"MoveDraggedCell\",\n    value: function MoveDraggedCell(mouseEvent, $cell, dontLookForOverlappedCell\n    /*optional*/\n    ) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var document = this.setup.Document;\n      var $element = this.setup.$Element;\n      var mouseDownPositionDifference = $cell.data(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n\n      var absoluteOffset = _utils.Utils.GetAbsoluteOffsetForElementFromMouseEvent($cell, mouseEvent, mouseDownPositionDifference);\n\n      var event = $.Event(_constants[\"default\"].EVENT_CELL_DRAG, {\n        left: absoluteOffset.left,\n        top: absoluteOffset.top,\n        target: $cell[0]\n      });\n      $element.trigger(event);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n\n      $cell.css('left', absoluteOffset.left);\n      $cell.css('top', absoluteOffset.top);\n\n      if (dontLookForOverlappedCell) {\n        return;\n      }\n\n      var triggerMouseOverEvent = function triggerMouseOverEvent($element) {\n        $element.trigger($.Event(_constants[\"default\"].EVENT_MOUSEOVER, {\n          pageX: mouseEvent.pageX,\n          pageY: mouseEvent.pageY,\n          target: $element[0]\n        }));\n      };\n\n      var overlappedElement = this.GetNonDraggedElementFromPoint($cell, mouseEvent);\n      var $overlappedCell = context.$getCellOfElement(overlappedElement);\n\n      if ($overlappedCell.length) {\n        // have to create event here like this other mouse coords are missing.\n        triggerMouseOverEvent($overlappedCell);\n      } else {\n        // have possibly dragged over non-managed cell.\n        // it might be from a linked 'additional' gridstrap.\n        if (this.AdditionalGridstrapDragTargetSelector) {\n          $(this.AdditionalGridstrapDragTargetSelector).each(function () {\n            var additionalContext = $(this).data(_constants[\"default\"].DATA_GRIDSTRAP);\n\n            if (additionalContext) {\n              // $getCellOfElement is a 'public' method.\n              var $additionalContextCell = additionalContext.$getCellOfElement(overlappedElement);\n\n              if ($additionalContextCell.length) {\n                // have to create event here like this other mouse coords are missing.\n                triggerMouseOverEvent($additionalContextCell);\n              }\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"GetCellAndInternalIndex\",\n    value: function GetCellAndInternalIndex(element) {\n      // element or jquery selector, child of cell or cell itself.\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n\n      if (!element) {\n        return null;\n      }\n\n      var $visibleCellElement = $(element);\n      var visibleCellAndIndex = null; // visibleCellAndIndex.$cell might be a child element/control perhaps of $visibleCell (found in the managed array).\n\n      for (var i = 0; i < this.CellsArray.length && !visibleCellAndIndex; i++) {\n        var $closestManagedCell = $visibleCellElement.closest(this.CellsArray[i]);\n\n        if ($closestManagedCell.length > 0) {\n          var $closestGridstrap = this.$GetClosestGridstrap($visibleCellElement);\n\n          if ($closestGridstrap.is(context.$el)) {\n            visibleCellAndIndex = {\n              index: i,\n              $cell: this.CellsArray[i]\n            };\n          }\n        }\n      }\n\n      return visibleCellAndIndex;\n    }\n  }, {\n    key: \"$GetClosestGridstrap\",\n    value: function $GetClosestGridstrap(element) {\n      // looks up the tree to find the closest instantiated gridstap instance. May not be this one in the case of nested grids.\n      var $ = this.setup.jQuery;\n\n      var dataExistsInSelector = function dataExistsInSelector(selector) {\n        return $(selector).filter(function () {\n          return !!$(this).data(_constants[\"default\"].DATA_GRIDSTRAP);\n        });\n      }; // a little strange that we can;t select parents() and include element itself in the order desired, so we have to do it like this.\n\n\n      var $currentElement = dataExistsInSelector(element);\n\n      if ($currentElement.length) {\n        return $currentElement.first();\n      }\n\n      return dataExistsInSelector($(element).parents()).first();\n    }\n  }, {\n    key: \"$GetDraggingCell\",\n    value: function $GetDraggingCell() {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var $draggedCell = $(this.setup.DragCellSelector);\n\n      if (!$draggedCell.length) {\n        return $(); //empty set\n      } // closest gridstrap must be this one - could be nested, we don't want to pick that up.\n\n\n      var $closestGridstrap = this.$GetClosestGridstrap($draggedCell);\n\n      if (!$closestGridstrap.is(context.$el)) {\n        return $(); //empty set\n      }\n\n      return $draggedCell;\n    }\n  }, {\n    key: \"MoveCell\",\n    value: function MoveCell($movingVisibleCell, $targetVisibleCell, gridstrapContext) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var $hiddenDragged = $movingVisibleCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n      var $hiddenTarget = $targetVisibleCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n\n      if ($hiddenDragged.is($hiddenTarget)) {\n        return;\n      }\n\n      if (gridstrapContext !== context) {\n        // moving between different gridstraps.\n        if (this.AdditionalGridstrapDragTargetSelector) {\n          // moving cells from this gridstrap to another (targetGridstrap).\n          // target must be within specified options at init.\n          var $targetGridstrap = $(this.AdditionalGridstrapDragTargetSelector).filter(function () {\n            return $(this).data(_constants[\"default\"].DATA_GRIDSTRAP) === gridstrapContext;\n          }).first();\n\n          if ($targetGridstrap.length) {\n            if (options.swapMode) {\n              var preDetachPositionTarget = _utils.Utils.GetPositionAndSizeOfCell($targetVisibleCell);\n\n              var preDetachPositionMoving = _utils.Utils.GetPositionAndSizeOfCell($movingVisibleCell);\n\n              var $detachedTargetOriginalCell = gridstrapContext.detachCell($targetVisibleCell);\n              var $detachedMovingOriginalCell = context.detachCell($movingVisibleCell);\n              var wasDragging = $detachedMovingOriginalCell.hasClass(options.dragCellClass);\n\n              if (wasDragging) {\n                $detachedMovingOriginalCell.removeClass(options.dragCellClass);\n              }\n\n              _utils.Utils.SwapJQueryElements($detachedMovingOriginalCell, $detachedTargetOriginalCell); //re attach in opposing grids.\n\n\n              var $reattachedMovingCell = gridstrapContext.attachCell($detachedMovingOriginalCell);\n              var $reattachedTargetCell = context.attachCell($detachedTargetOriginalCell); // have to remove visibleCellClass that these two would now have\n              // as that should have the css transition animation in it, \n              // and we want to bypass that, set position, then apply it, set position again. \n\n              _utils.Utils.ClearAbsoluteCSS($reattachedMovingCell);\n\n              _utils.Utils.ClearAbsoluteCSS($reattachedTargetCell);\n\n              gridstrapContext.setCellAbsolutePositionAndSize($reattachedMovingCell, preDetachPositionMoving);\n              context.setCellAbsolutePositionAndSize($reattachedTargetCell, preDetachPositionTarget); // $reattachedMovingCell.addClass(options.visibleCellClass);\n              // $reattachedTargetCell.addClass(options.visibleCellClass);\n\n              gridstrapContext.setCellAbsolutePositionAndSize($reattachedMovingCell, preDetachPositionTarget);\n              context.setCellAbsolutePositionAndSize($reattachedTargetCell, preDetachPositionMoving);\n\n              if (wasDragging) {\n                $reattachedMovingCell.addClass(options.dragCellClass);\n              }\n            } else {\n              // insert mode.\n              var _preDetachPositionMoving = _utils.Utils.GetPositionAndSizeOfCell($movingVisibleCell);\n\n              var _$detachedMovingOriginalCell = context.detachCell($movingVisibleCell);\n\n              var _wasDragging = _$detachedMovingOriginalCell.hasClass(options.dragCellClass);\n\n              if (_wasDragging) {\n                _$detachedMovingOriginalCell.removeClass(options.dragCellClass);\n              }\n\n              _utils.Utils.DetachAndInsertInPlaceJQueryElement(_$detachedMovingOriginalCell, $hiddenTarget);\n\n              var _$reattachedMovingCell = gridstrapContext.attachCell(_$detachedMovingOriginalCell); // have to remove visibleCellClass that these two would now have\n              // as that should have the css transition animation in it, \n              // and we want to bypass that, set position, then apply it, set position again. \n\n\n              _$reattachedMovingCell.removeClass(options.visibleCellClass);\n\n              gridstrapContext.setCellAbsolutePositionAndSize(_$reattachedMovingCell, _preDetachPositionMoving);\n\n              _$reattachedMovingCell.addClass(options.visibleCellClass);\n\n              if (_wasDragging) {\n                _$reattachedMovingCell.addClass(options.dragCellClass);\n              }\n            }\n\n            gridstrapContext.updateVisibleCellCoordinates();\n            context.updateVisibleCellCoordinates();\n          }\n        }\n      } else {\n        // regular internal movement \n        if (options.swapMode) {\n          _utils.Utils.SwapJQueryElements($hiddenDragged, $hiddenTarget);\n        } else {\n          _utils.Utils.DetachAndInsertInPlaceJQueryElement($hiddenDragged, $hiddenTarget);\n        }\n\n        context.updateVisibleCellCoordinates();\n      }\n    } //~moveCell\n\n  }, {\n    key: \"ResizeCell\",\n    value: function ResizeCell($cell, width, height) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var $element = this.setup.$Element;\n      var event = $.Event(_constants[\"default\"].EVENT_CELL_RESIZE, {\n        width: width,\n        height: height,\n        target: $cell[0]\n      });\n      $element.trigger(event);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n\n      var $hiddenCell = $cell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n      $hiddenCell.css('width', width);\n      $hiddenCell.css('height', height);\n      context.updateVisibleCellCoordinates();\n    }\n  }, {\n    key: \"$GetHiddenCellsInElementOrder\",\n    value: function $GetHiddenCellsInElementOrder() {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n      var $element = this.setup.$Element;\n      var self = this;\n      var $attachedHiddenCells = $element.find(this.setup.HiddenCellSelector).filter(function () {\n        var $linkedVisibleCell = $(this).data(_constants[\"default\"].DATA_VISIBLE_CELL);\n\n        if (!$linkedVisibleCell || !$linkedVisibleCell.length) {\n          return false;\n        }\n\n        for (var i = 0; i < self.CellsArray.length; i++) {\n          if (self.CellsArray[i].is($linkedVisibleCell)) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n      return $attachedHiddenCells;\n    }\n  }, {\n    key: \"ModifyCellsArray\",\n    value: function ModifyCellsArray(callback) {\n      callback(this.cellsArray);\n    }\n  }, {\n    key: \"UpdateNonContiguousCellsForDrag\",\n    value: function UpdateNonContiguousCellsForDrag($draggedCell, mouseEvent) {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n\n      var furthestVisibleCellPositionAndSize = _utils.Utils.GetPositionAndSizeOfCell($draggedCell);\n\n      var compare = function compare(positionAndSize) {\n        return positionAndSize.left + positionAndSize.width + (positionAndSize.top + positionAndSize.height) * 100000;\n      };\n\n      var $hiddenCells = this.$GetHiddenCellsInElementOrder();\n      $hiddenCells.each(function (i, e) {\n        if (!$(e).data(_constants[\"default\"].DATA_VISIBLE_CELL).hasClass(options.nonContiguousPlaceholderCellClass)) {\n          var positionAndSize = _utils.Utils.GetPositionAndSizeOfCell($(e));\n\n          if (compare(positionAndSize) > compare(furthestVisibleCellPositionAndSize)) {\n            furthestVisibleCellPositionAndSize = positionAndSize;\n          }\n        }\n      });\n      var changed = this.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n        var lastHiddenCellPositionAndSize = _utils.Utils.GetPositionAndSizeOfCell($hiddenCells.last()); // A whole row of extra cells should exist.\n\n\n        if (appending) {\n          // need at least 2* cell height worht of space at bottom of grid.\n          return lastHiddenCellPositionAndSize.top - furthestVisibleCellPositionAndSize.top < furthestVisibleCellPositionAndSize.height * 2;\n        } else {\n          return lastHiddenCellPositionAndSize.top - furthestVisibleCellPositionAndSize.top > furthestVisibleCellPositionAndSize.height * 2;\n        }\n      });\n\n      if (changed) {\n        this.MoveDraggedCell(mouseEvent, $draggedCell);\n      }\n    }\n  }, {\n    key: \"AppendOrRemoveNonContiguousCellsWhile\",\n    value: function AppendOrRemoveNonContiguousCellsWhile(appendWhilePredicate) {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n      var context = this.setup.Context;\n      var changed = false;\n      var $hiddenCells = this.$GetHiddenCellsInElementOrder();\n\n      while (appendWhilePredicate($hiddenCells, true)) {\n        // if mouse beyond or getting near end of static hidden element, then make some placeholder ones.\n        // insert dummy cells if cursor is beyond where the cells finish.\n        var $insertedCell = context.insertCell(options.nonContiguousCellHtml, $hiddenCells.length);\n        $insertedCell.addClass(options.nonContiguousPlaceholderCellClass);\n        var $insertedHiddenCell = $insertedCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n        $hiddenCells = $hiddenCells.add($insertedHiddenCell);\n        changed = true;\n      } // remove cells at end when we have too much.          \n\n\n      var $lastHiddenCell = $hiddenCells.last();\n      var $bottomRowHiddenCells = null;\n\n      var $getBottomRowHiddenCells = function $getBottomRowHiddenCells() {\n        $bottomRowHiddenCells = $bottomRowHiddenCells || $hiddenCells.filter(function (i, e) {\n          return _utils.Utils.GetPositionAndSizeOfCell($(e)).top === _utils.Utils.GetPositionAndSizeOfCell($lastHiddenCell).top;\n        });\n        return $bottomRowHiddenCells;\n      }; // remove all non-contiguous bottom row cells.\n\n\n      while (appendWhilePredicate($hiddenCells, false) && $getBottomRowHiddenCells().filter(function (i, e) {\n        return $(e).data(_constants[\"default\"].DATA_VISIBLE_CELL).hasClass(options.nonContiguousPlaceholderCellClass);\n      }).length === $getBottomRowHiddenCells().length && $getBottomRowHiddenCells().length > 0) {\n        // while all bottom row cells are placeholders.\n        context.removeCell($lastHiddenCell.data(_constants[\"default\"].DATA_VISIBLE_CELL));\n        $hiddenCells = $hiddenCells.not($lastHiddenCell); // update new last hidden cell.\n\n        $lastHiddenCell = $hiddenCells.last();\n        $bottomRowHiddenCells = null; // force refilter. \n\n        changed = true;\n      }\n\n      return changed;\n    }\n  }, {\n    key: \"AdditionalGridstrapDragTargetSelector\",\n    get: function get() {\n      return this.additionalGridstrapDragTargetSelector;\n    },\n    set: function set(value) {\n      this.additionalGridstrapDragTargetSelector = value;\n    }\n  }, {\n    key: \"LastMouseOverCellTarget\",\n    get: function get() {\n      return this.lastMouseOverCellTarget;\n    },\n    set: function set(value) {\n      this.lastMouseOverCellTarget = value;\n    }\n  }, {\n    key: \"CellsArray\",\n    get: function get() {\n      return this.cellsArray;\n    }\n  }]);\n\n  return Internal;\n}();\n\nexports.Internal = Internal;\n\n},{\"./constants\":1,\"./utils\":7}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Methods = void 0;\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Methods =\n/*#__PURE__*/\nfunction () {\n  function Methods(setup, internal, handlers) {\n    _classCallCheck(this, Methods);\n\n    this.setup = setup;\n    this.internal = internal;\n    this.handlers = handlers;\n  }\n\n  _createClass(Methods, [{\n    key: \"$getCellOfElement\",\n    value: function $getCellOfElement(element) {\n      // could be selector\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var found = this.internal.GetCellAndInternalIndex(element);\n\n      if (!found) {\n        return $();\n      }\n\n      return found.$cell;\n    }\n  }, {\n    key: \"setCellAbsolutePositionAndSize\",\n    value: function setCellAbsolutePositionAndSize($cell, positionAndSize) {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var $element = this.setup.$Element;\n      var event = $.Event(_constants[\"default\"].EVENT_CELL_REDRAW, {\n        left: positionAndSize.left,\n        top: positionAndSize.top,\n        width: positionAndSize.width,\n        height: positionAndSize.height,\n        target: $cell[0]\n      });\n      $element.trigger(event);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      } // data here is relied upon when drag-stop. \n\n\n      $cell.data(_constants[\"default\"].DATA_CELL_POSITION_AND_SIZE, positionAndSize);\n      $cell.css('left', positionAndSize.left);\n      $cell.css('top', positionAndSize.top);\n      $cell.css('width', positionAndSize.width);\n      $cell.css('height', positionAndSize.height);\n    }\n  }, {\n    key: \"updateVisibleCellCoordinates\",\n    value: function updateVisibleCellCoordinates() {\n      var $ = this.setup.jQuery;\n      var context = this.setup.Context;\n      var options = this.setup.Options;\n      var $draggedCell = this.internal.$GetDraggingCell();\n\n      for (var i = 0; i < this.internal.CellsArray.length; i++) {\n        var $this = this.internal.CellsArray[i];\n        var $hiddenClone = $this.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n\n        var positionNSizeOfHiddenClone = _utils.Utils.GetPositionAndSizeOfCell($hiddenClone);\n\n        this.setCellAbsolutePositionAndSize($this, positionNSizeOfHiddenClone);\n      } // need to also update the first child gristrap - one that might exist within this one - it is then obviously recursive.\n\n\n      for (var i = 0; i < this.internal.CellsArray.length; i++) {\n        var $nestedGridstrap = this.internal.CellsArray[i].find('*').filter(function () {\n          return !!$(this).data(_constants[\"default\"].DATA_GRIDSTRAP);\n        });\n        $nestedGridstrap.each(function () {\n          $(this).data(_constants[\"default\"].DATA_GRIDSTRAP).updateVisibleCellCoordinates();\n        });\n      }\n    } // returns jquery object of new cell.\n    // index is optional.\n\n  }, {\n    key: \"insertCell\",\n    value: function insertCell(cellHtml, index) {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n      var $element = this.setup.$Element;\n      var $existingHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n\n      if (typeof index === 'undefined') {\n        index = $existingHiddenCells.length; // insert at end.\n      }\n\n      if (index > $existingHiddenCells.length && options.nonContiguousCellHtml && options.autoPadNonContiguousCells) {\n        this.internal.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n          if (!appending) {\n            // do not remove when trying to remove.\n            return false;\n          } // insert placeholders until quantity of cells is index -1.\n\n\n          return $hiddenCells.length < index;\n        }); // update these.\n\n        $existingHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n      }\n\n      var $insertedCell;\n\n      if (index === $existingHiddenCells.length) {\n        if ($existingHiddenCells.length === 0) {\n          // the grid is empty.\n          $insertedCell = $(cellHtml).appendTo($element);\n        } else {\n          $insertedCell = $(cellHtml).insertAfter($existingHiddenCells.last());\n        }\n      } else {\n        $insertedCell = $(cellHtml).insertBefore($existingHiddenCells.eq(index));\n      }\n\n      this.attachCell($insertedCell);\n      return $insertedCell;\n    }\n  }, {\n    key: \"attachCell\",\n    value: function attachCell(element) {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n      var $element = this.setup.$Element;\n\n      if (!$(element).closest($element).is($element)) {\n        throw new Error(_constants[\"default\"].ERROR_INVALID_ATTACH_ELEMENT);\n      }\n\n      this.internal.InitCellsHiddenCopyAndSetAbsolutePosition(element);\n      this.updateVisibleCellCoordinates();\n      return $(element);\n    }\n  }, {\n    key: \"detachCell\",\n    value: function detachCell(element) {\n      var options = this.setup.Options;\n      var cellNIndex = this.internal.GetCellAndInternalIndex(element);\n      var $hiddenClone = cellNIndex.$cell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n      var $detachedVisibleCell = cellNIndex.$cell.detach(); // remove 'visible' things, and put the cell back where it came from.\n\n      _utils.Utils.ClearAbsoluteCSS($detachedVisibleCell);\n\n      $detachedVisibleCell.removeData(_constants[\"default\"].DATA_HIDDEN_CELL);\n      $detachedVisibleCell.removeClass(options.visibleCellClass);\n      var $reattachedOriginalCell = $detachedVisibleCell.insertAfter($hiddenClone); // remove hidden clone.\n\n      $hiddenClone.remove(); // finally remove from managed array\n\n      this.internal.ModifyCellsArray(function (array) {\n        return array.splice(cellNIndex.index, 1);\n      });\n      this.updateVisibleCellCoordinates();\n      return $reattachedOriginalCell;\n    }\n  }, {\n    key: \"removeCell\",\n    value: function removeCell(element) {\n      var $detachedCell = this.detachCell(element);\n      $detachedCell.remove();\n      this.updateVisibleCellCoordinates();\n    }\n  }, {\n    key: \"moveCell\",\n    value: function moveCell(element, toIndex, targetGridstrap) {\n      // targetGridstrap optional..\n      var options = this.setup.Options;\n      var context = this.setup.Context;\n      var $existingVisibleCells = this.$getCells();\n\n      if (toIndex > $existingVisibleCells.length && options.nonContiguousCellHtml && options.autoPadNonContiguousCells) {\n        this.internal.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n          if (!appending) {\n            // do not remove when trying to remove.\n            return false;\n          } // insert placeholders until quantity of cells is index -1.\n\n\n          return $hiddenCells.length <= toIndex;\n        }); // update these.\n\n        $existingVisibleCells = this.$getCells();\n      }\n\n      var cellNIndex = this.internal.GetCellAndInternalIndex(element);\n      this.internal.MoveCell(cellNIndex.$cell, $existingVisibleCells.eq(toIndex), targetGridstrap || context);\n    }\n  }, {\n    key: \"$getCellFromCoordinates\",\n    value: function $getCellFromCoordinates(clientX, clientY) {\n      var document = this.setup.Document;\n      var $ = this.setup.jQuery;\n      var element = document.elementFromPoint(clientX, clientY);\n      var cellAndIndex = this.internal.GetCellAndInternalIndex(element);\n\n      if (!cellAndIndex) {\n        return $();\n      }\n\n      return cellAndIndex.$cell;\n    }\n  }, {\n    key: \"getCellIndexFromCoordinates\",\n    value: function getCellIndexFromCoordinates(clientX, clientY) {\n      var document = this.setup.Document;\n      var $ = this.setup.jQuery;\n      var element = document.elementFromPoint(clientX, clientY);\n      var cellAndIndex = this.internal.GetCellAndInternalIndex(element);\n\n      if (!cellAndIndex) {\n        return -1;\n      }\n\n      return this.$getCells().index(cellAndIndex.$cell);\n    }\n  }, {\n    key: \"$getCells\",\n    value: function $getCells() {\n      var $ = this.setup.jQuery;\n      var $attachedHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n      var attachedVisibleCellElements = $attachedHiddenCells.map(function () {\n        return $(this).data(_constants[\"default\"].DATA_VISIBLE_CELL)[0]; // TODO is this correct [0] ?\n      });\n      return $(attachedVisibleCellElements);\n    }\n  }, {\n    key: \"$getHiddenCells\",\n    value: function $getHiddenCells() {\n      return this.internal.$GetHiddenCellsInElementOrder();\n    }\n  }, {\n    key: \"$getCellContainer\",\n    value: function $getCellContainer() {\n      var $ = this.setup.jQuery;\n      return $(this.setup.VisibleCellContainerSelector);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(newOptions) {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n      this.setup.Options = $.extend({}, options, newOptions);\n    }\n  }, {\n    key: \"getCellIndexOfElement\",\n    value: function getCellIndexOfElement(element) {\n      var $cell = this.$getCellOfElement(element);\n      var $cells = this.$getCells();\n      return $cells.index($cell);\n    }\n  }, {\n    key: \"setAdditionalGridstrapDragTarget\",\n    value: function setAdditionalGridstrapDragTarget(element) {\n      var $ = this.setup.jQuery;\n      var eventHandlers = this.handlers;\n      var self = this;\n      var mouseOverAdditionalEventName = \"\".concat(_constants[\"default\"].EVENT_MOUSEOVER, \".gridstrap-additional-\").concat(this.setup.IdPrefix);\n\n      if (self.internal.AdditionalGridstrapDragTargetSelector) {\n        $(self.internal.AdditionalGridstrapDragTargetSelector).each(function () {\n          var $visibleCellContainer = $($(this).data(_constants[\"default\"].DATA_GRIDSTRAP).options.visibleCellContainerParentSelector); // remove any old handlers.\n          // have to prefix it to prevent clashes with other gridstraphs,\n\n          $visibleCellContainer.off(mouseOverAdditionalEventName);\n        });\n      }\n\n      self.internal.AdditionalGridstrapDragTargetSelector = element; // handle certain mouse event for potential other gridstraps.\n\n      if (self.internal.AdditionalGridstrapDragTargetSelector) {\n        $(self.internal.AdditionalGridstrapDragTargetSelector).each(function () {\n          self.internal.HandleCellMouseEvent($(this).data(_constants[\"default\"].DATA_GRIDSTRAP), mouseOverAdditionalEventName, false, eventHandlers.onMouseover.bind(eventHandlers));\n        });\n      }\n    }\n  }, {\n    key: \"modifyCell\",\n    value: function modifyCell(cellIndex, callback) {\n      var context = this.setup.Context;\n      var $visibleCell = this.$getCells().eq(cellIndex);\n      var $hiddenCell = $visibleCell.data(_constants[\"default\"].DATA_HIDDEN_CELL);\n      var getVisibleCellCalled = false,\n          getHiddenCellCalled = false;\n      callback.call(context, function () {\n        getVisibleCellCalled = true;\n        return $visibleCell;\n      }, function () {\n        getHiddenCellCalled = true;\n        return $hiddenCell;\n      });\n\n      if (getVisibleCellCalled) {\n        // copy contents to hidden cell.\n        $hiddenCell.html($visibleCell.html());\n      }\n\n      this.updateVisibleCellCoordinates();\n    }\n  }, {\n    key: \"padWithNonContiguousCells\",\n    value: function padWithNonContiguousCells(callback) {\n      var $ = this.setup.jQuery;\n      var options = this.setup.Options;\n\n      if (!options.nonContiguousCellHtml) {\n        throw new Error(_constants[\"default\"].ERROR_NONCONTIGUOUS_HTML_UNDEFINED);\n      }\n\n      var $attachedHiddenCells = this.internal.$GetHiddenCellsInElementOrder();\n      this.internal.AppendOrRemoveNonContiguousCellsWhile(function ($hiddenCells, appending) {\n        if (!appending) {\n          // do not remove, when trying to remove.\n          // only append/pad.\n          return false;\n        }\n\n        var cellCount = $hiddenCells.length;\n        var placeHolderCount = $hiddenCells.filter(function (i, e) {\n          return $(e).data(_constants[\"default\"].DATA_VISIBLE_CELL).hasClass(options.nonContiguousPlaceholderCellClass);\n        }).length;\n        return callback(cellCount, placeHolderCount);\n      });\n    }\n  }]);\n\n  return Methods;\n}();\n\nexports.Methods = Methods;\n\n},{\"./constants\":1,\"./utils\":7}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Setup = void 0;\n\nvar _utils = require(\"./utils\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Setup =\n/*#__PURE__*/\nfunction () {\n  function Setup($, window, document, $el, context) {\n    _classCallCheck(this, Setup);\n\n    var options = context.options; // must pick cells before potentially adding child wrapper to selection.\n\n    this.$originalCells = $el.find(options.gridCellSelector);\n    this.idPrefix = _utils.Utils.GenerateRandomId();\n    var wrapperGeneratedId = 'gridstrap-' + this.idPrefix;\n    this.visibleCellContainerSelector = '#' + wrapperGeneratedId; // drag selector must be within wrapper div. Turn class name/list into selector. \n\n    this.dragCellSelector = this.visibleCellContainerSelector + ' ' + _utils.Utils.ConvertCssClassToJQuerySelector(options.dragCellClass) + ':first';\n    this.resizeCellSelector = this.visibleCellContainerSelector + ' ' + _utils.Utils.ConvertCssClassToJQuerySelector(options.resizeCellClass) + ':first'; // visibleCellContainerClassSelector just contains a .class selector, dont prfix with id. Important. Refactor this.\n\n    this.visibleCellContainerClassSelector = _utils.Utils.ConvertCssClassToJQuerySelector(options.visibleCellContainerClass) + ':first';\n    this.hiddenCellSelector = _utils.Utils.ConvertCssClassToJQuerySelector(options.hiddenCellClass); // if option not specified, use JQuery element as parent for wrapper.\n\n    options.visibleCellContainerParentSelector = options.visibleCellContainerParentSelector || $el;\n    $(options.visibleCellContainerParentSelector).append('<div id=\"' + wrapperGeneratedId + '\" class=\"' + options.visibleCellContainerClass + '\"></div>');\n    this.window = window;\n    this.document = document;\n    this.$ = $;\n    this.$el = $el;\n    this.context = context;\n  }\n\n  _createClass(Setup, [{\n    key: \"Window\",\n    get: function get() {\n      return this.window;\n    }\n  }, {\n    key: \"Document\",\n    get: function get() {\n      return this.document;\n    }\n  }, {\n    key: \"jQuery\",\n    get: function get() {\n      return this.$;\n    }\n  }, {\n    key: \"Options\",\n    get: function get() {\n      return this.context.options;\n    },\n    set: function set(value) {\n      this.context.options = value;\n    }\n  }, {\n    key: \"$Element\",\n    get: function get() {\n      return this.$el;\n    } // Only used for assigning context when calling options' methods.\n\n  }, {\n    key: \"Context\",\n    get: function get() {\n      return this.context;\n    }\n  }, {\n    key: \"$OriginalCells\",\n    get: function get() {\n      return this.$originalCells;\n    }\n  }, {\n    key: \"IdPrefix\",\n    get: function get() {\n      return this.idPrefix;\n    }\n  }, {\n    key: \"VisibleCellContainerSelector\",\n    get: function get() {\n      return this.visibleCellContainerSelector;\n    }\n  }, {\n    key: \"DragCellSelector\",\n    get: function get() {\n      return this.dragCellSelector;\n    }\n  }, {\n    key: \"ResizeCellSelector\",\n    get: function get() {\n      return this.resizeCellSelector;\n    }\n  }, {\n    key: \"VisibleCellContainerClassSelector\",\n    get: function get() {\n      return this.visibleCellContainerClassSelector;\n    }\n  }, {\n    key: \"HiddenCellSelector\",\n    get: function get() {\n      return this.hiddenCellSelector;\n    }\n  }]);\n\n  return Setup;\n}();\n\nexports.Setup = Setup;\n\n},{\"./utils\":7}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utils = void 0;\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Utils =\n/*#__PURE__*/\nfunction () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"GenerateRandomId\",\n    value: function GenerateRandomId() {\n      return Math.random().toString(36).substr(2, 5) + Math.round(Math.random() * 1000).toString();\n    }\n  }, {\n    key: \"ConvertCssClassToJQuerySelector\",\n    value: function ConvertCssClassToJQuerySelector(cssClass) {\n      return cssClass.replace(/(^ *| +)/g, '.');\n    }\n  }, {\n    key: \"Debounce\",\n    value: function Debounce(callback, milliseconds, leading, timeout) {\n      if (typeof timeout === 'undefined') {\n        timeout = null;\n      }\n\n      return function () {\n        var context = this;\n        var args = arguments;\n\n        var later = function later() {\n          timeout = null;\n\n          if (!leading) {\n            callback.apply(context, args);\n          }\n        };\n\n        var callNow = !milliseconds || leading && !timeout;\n        clearTimeout(timeout);\n\n        if (callNow) {\n          callback.apply(context, args);\n        } else {\n          timeout = setTimeout(later, milliseconds);\n        }\n\n        return timeout;\n      };\n    }\n  }, {\n    key: \"Limit\",\n    value: function Limit(callback, milliseconds) {\n      var d = new Date();\n      var n = d.getTime();\n\n      if (n - (Utils.limit || 0) > milliseconds) {\n        callback();\n        Utils.limit = n;\n      }\n    }\n  }, {\n    key: \"SwapJQueryElements\",\n    value: function SwapJQueryElements($a, $b) {\n      var getInPlaceFunction = function getInPlaceFunction($element) {\n        var $other = $a.is($element) ? $b : $a;\n        var $next = $element.next();\n        var $prev = $element.prev();\n        var $parent = $element.parent(); // cannot swap a with b exactly if there are no other siblings.\n\n        if ($next.length > 0 && !$next.is($other)) {\n          return function ($newElement) {\n            $next.before($newElement);\n          };\n        } else if ($prev.length > 0 && !$prev.is($other)) {\n          return function ($newElement) {\n            $prev.after($newElement);\n          };\n        } // if neither $next nor $prev is appropriate, \n        // and $next is $other, then can make assumption\n        // that we're moving $a to $b and $a is first element.\n        else if ($next.length > 0 && $next.is($other)) {\n            return function ($newElement) {\n              $parent.prepend($newElement);\n            };\n          } else {\n            // no siblings, so can just use append\n            return function ($newElement) {\n              $parent.append($newElement);\n            };\n          }\n      };\n\n      var aInPlaceFunc = getInPlaceFunction($a);\n      var bInPlaceFunc = getInPlaceFunction($b);\n      var $aDetached = $a.detach();\n      var $bDetached = $b.detach(); // swap finally.\n\n      bInPlaceFunc($aDetached);\n      aInPlaceFunc($bDetached);\n    }\n  }, {\n    key: \"DetachAndInsertInPlaceJQueryElement\",\n    value: function DetachAndInsertInPlaceJQueryElement($detachElement, $inPlaceElement) {\n      var inPlaceElementIndex = $inPlaceElement.index();\n      var detachElementIndex = $detachElement.index();\n      var $detachedElement = $detachElement.detach();\n\n      if (inPlaceElementIndex < detachElementIndex) {\n        $inPlaceElement.before($detachedElement);\n      } else {\n        $inPlaceElement.after($detachedElement);\n      }\n    }\n  }, {\n    key: \"ClearAbsoluteCSS\",\n    value: function ClearAbsoluteCSS($element) {\n      $element.css('top', '');\n      $element.css('left', '');\n      $element.css('width', '');\n      $element.css('height', '');\n    }\n  }, {\n    key: \"ClearMouseDownData\",\n    value: function ClearMouseDownData($cell) {\n      $cell.removeData(_constants[\"default\"].DATA_MOUSEDOWN_POSITION_DIFF);\n      $cell.removeData(_constants[\"default\"].DATA_MOUSEDOWN_SIZE);\n    }\n  }, {\n    key: \"GetAbsoluteOffsetForElementFromMouseEvent\",\n    value: function GetAbsoluteOffsetForElementFromMouseEvent($element, mouseEvent, adjustment) {\n      var $parent = $element.parent();\n      var parentOffset = $parent.offset();\n      var parentPosition = $parent.position();\n      var absoluteX = parentOffset.left - parentPosition.left;\n      var absoluteY = parentOffset.top - parentPosition.top;\n      var left = mouseEvent.pageX - absoluteX - adjustment.x;\n      var top = mouseEvent.pageY - absoluteY - adjustment.y;\n      return {\n        left: left,\n        top: top\n      };\n    }\n  }, {\n    key: \"GetPositionAndSizeOfCell\",\n    value: function GetPositionAndSizeOfCell($cell) {\n      var position = $cell.position();\n      var w = $cell.outerWidth();\n      var h = $cell.outerHeight();\n      return {\n        left: position.left,\n        top: position.top,\n        width: w,\n        height: h\n      };\n    }\n  }, {\n    key: \"ConvertTouchToMouseEvent\",\n    value: function ConvertTouchToMouseEvent(touchEvent) {\n      var touch = null;\n\n      for (var i = 0; !touch && i < touchEvent.changedTouches.length; i++) {\n        if (touchEvent.changedTouches[i].identifier === 0) {\n          touch = touchEvent.changedTouches[i];\n        }\n      }\n\n      touchEvent.pageX = touch.pageX;\n      touchEvent.pageY = touch.pageY;\n      touchEvent.clientX = touch.clientX;\n      touchEvent.clientY = touch.clientY;\n      return touchEvent;\n    }\n  }]);\n\n  return Utils;\n}();\n\nexports.Utils = Utils;\n\n},{\"./constants\":1}]},{},[2]);\n"]},"metadata":{},"sourceType":"script"}