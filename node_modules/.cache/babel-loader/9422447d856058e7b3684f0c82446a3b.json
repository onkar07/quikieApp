{"ast":null,"code":"var _jsxFileName = \"/Users/onkarsarang/Documents/reactWork/quikie/src/components/draggable.js\";\nimport React from 'react';\nimport $ from 'jquery';\nimport 'jquery.gridstrap';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Dr(props) {\n  // {$('#basic-grid').gridstrap();}\n  const getItems = count => Array.from({\n    length: count\n  }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 ${grid}px 0 0`,\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        direction: \"horizontal\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          ...provided.droppableProps,\n          children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 21\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_c = Dr;\nexport default Dr;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dr\");","map":{"version":3,"sources":["/Users/onkarsarang/Documents/reactWork/quikie/src/components/draggable.js"],"names":["React","$","DragDropContext","Droppable","Draggable","Dr","props","getItems","count","Array","from","length","v","k","map","id","content","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","onDragEnd","provided","snapshot","innerRef","getListStyle","isDraggingOver","droppableProps","state","items","item","index","draggableProps","dragHandleProps","style","placeholder"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,kBAAP;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD;;;;AACA,SAASC,EAAT,CAAYC,KAAZ,EAAmB;AACf;AACA,QAAMC,QAAQ,GAAGC,KAAK,IACxBC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEH;AAAV,GAAX,EAA8B,CAACI,CAAD,EAAIC,CAAJ,KAAUA,CAAxC,EAA2CC,GAA3C,CAA+CD,CAAC,KAAK;AACnDE,IAAAA,EAAE,EAAG,QAAOF,CAAE,EADqC;AAEnDG,IAAAA,OAAO,EAAG,QAAOH,CAAE;AAFgC,GAAL,CAAhD,CADE;;AAKF,QAAMI,YAAY,GAAG,CAACC,UAAD,EAAaC,cAAb,MAAiC;AACpD;AACAC,IAAAA,UAAU,EAAE,MAFwC;AAGpDC,IAAAA,OAAO,EAAEC,IAAI,GAAG,CAHoC;AAIpDC,IAAAA,MAAM,EAAG,KAAID,IAAK,QAJkC;AAMpD;AACAE,IAAAA,UAAU,EAAEN,UAAU,GAAG,YAAH,GAAkB,MAPY;AASpD;AACA,OAAGC;AAViD,GAAjC,CAArB;;AAYE,sBACI;AAAA,2BA4BA,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKM,SAAjC;AAAA,6BACA,QAAC,SAAD;AAAW,QAAA,WAAW,EAAC,WAAvB;AAAmC,QAAA,SAAS,EAAC,YAA7C;AAAA,kBACG,CAACC,QAAD,EAAWC,QAAX,kBACC;AACE,UAAA,GAAG,EAAED,QAAQ,CAACE,QADhB;AAEE,UAAA,KAAK,EAAEC,YAAY,CAACF,QAAQ,CAACG,cAAV,CAFrB;AAAA,aAGMJ,QAAQ,CAACK,cAHf;AAAA,qBAKG,KAAKC,KAAL,CAAWC,KAAX,CAAiBnB,GAAjB,CAAqB,CAACoB,IAAD,EAAOC,KAAP,kBACpB,QAAC,SAAD;AAAyB,YAAA,WAAW,EAAED,IAAI,CAACnB,EAA3C;AAA+C,YAAA,KAAK,EAAEoB,KAAtD;AAAA,sBACG,CAACT,QAAD,EAAWC,QAAX,kBACC;AACE,cAAA,GAAG,EAAED,QAAQ,CAACE,QADhB;AAAA,iBAEMF,QAAQ,CAACU,cAFf;AAAA,iBAGMV,QAAQ,CAACW,eAHf;AAIE,cAAA,KAAK,EAAEpB,YAAY,CACjBU,QAAQ,CAACT,UADQ,EAEjBQ,QAAQ,CAACU,cAAT,CAAwBE,KAFP,CAJrB;AAAA,wBASGJ,IAAI,CAAClB;AATR;AAAA;AAAA;AAAA;AAAA;AAFJ,aAAgBkB,IAAI,CAACnB,EAArB;AAAA;AAAA;AAAA;AAAA,kBADD,CALH,EAsBGW,QAAQ,CAACa,WAtBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AA5BA,mBADJ;AA8DH;;KAjFQlC,E;AAmFT,eAAeA,EAAf","sourcesContent":["import React from 'react'\nimport $ from 'jquery'\nimport 'jquery.gridstrap'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nfunction Dr(props) {\n    // {$('#basic-grid').gridstrap();}\n    const getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 ${grid}px 0 0`,\n  \n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n  \n    // styles we need to apply on draggables\n    ...draggableStyle,\n  });\n    return (\n        <>\n        {/* <DragDropContext>\n            <Droppable droppableId=\"droppable-1\" type=\"PERSON\">\n                {(provided, snapshot) => (\n                    <div\n                    ref={provided.innerRef}\n                    style={{ backgroundColor: snapshot.isDraggingOver ? 'blue' : 'grey' }}\n                    {...provided.droppableProps}\n                    >\n                    <Draggable key=\"key1\" draggableId=\"draggable-1\" index={0}>\n                    {(provided, snapshot) => {\n                        <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <div id=\"grid\" class=\"row\">\n                        <div class=\"col-xs-4 col-sm-2 col-md-1\"><h1>Hello</h1></div>\n                        <div class=\"col-xs-4 col-sm-2 col-md-1\"><h1>world</h1></div>\n                        </div>\n                        </div>\n                    }}\n                    </Draggable>\n                    {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext> */}\n        <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n            \n        </>\n    )\n}\n\nexport default Dr\n"]},"metadata":{},"sourceType":"module"}